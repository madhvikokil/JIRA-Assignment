{"ast":null,"code":"\"use strict\";\n\nmodule.exports = RoleClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/role'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor RoleClient\r\n */\n\nfunction RoleClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Get all the ProjectRoles available in Jira. Currently this list is global.\r\n   *\r\n   * @method getAll\r\n   * @memberOf RoleClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param [callback] Called when the permissions have been returned.\r\n   * @return {Promise} Resolved when the permissions have been returned.\r\n   */\n\n  this.getAll = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates a new ProjectRole to be available in Jira.\r\n   * The created role does not have any default actors assigned.\r\n   *\r\n   * @method createRole\r\n   * @memberOf RoleClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.role See {@link https://developer.atlassian.com/cloud/jira/platform/rest/#api-api-2-role-post}\r\n   * @param [callback] Called when the scheme has been created.\r\n   * @return {Promise} Resolved when the scheme has been created.\r\n   */\n\n\n  this.createRole = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.role\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a specific ProjectRole available in Jira.\r\n   *\r\n   * @method getRoleById\r\n   * @memberOf RoleClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param [callback] Called when the permissions have been returned.\r\n   * @return {Promise} Resolved when the permissions have been returned.\r\n   */\n\n\n  this.getRoleById = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Fully updates a roles. Both name and description must be given.\r\n   *\r\n   * @method updateRole\r\n   * @memberOf RoleClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.roldId Identifier for teh role.\r\n   * @param opts.role Object containing the name and description to be updated.\r\n   * @param [callback] Called when the permissions have been returned.\r\n   * @return {Promise} Resolved when the permissions have been returned.\r\n   */\n\n\n  this.updateRole = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.role\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Deletes a role. May return 403 in the future\r\n  *\r\n  * @method deleteRole\r\n  * @memberOf RoleClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {String} opts.roldId Identifier for the role.\r\n  * @param {String} opts.swap if given, removes a role even if it is used in scheme by replacing the role with the given one\r\n  * @param [callback] Called when the permissions have been returned.\r\n  * @return {Promise} Resolved when the permissions have been returned.\r\n  */\n\n\n  this.deleteRole = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        swap: opts.swap\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Gets default actors for the given role.\r\n  *\r\n  * @method getActors\r\n  * @memberOf RoleClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {String} opts.roldId Identifier for the role.\r\n  * @param [callback] Called when the permissions have been returned.\r\n  * @return {Promise} Resolved when the permissions have been returned.\r\n  */\n\n\n  this.getActors = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId + '/actors'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Adds default actors to the given role.\r\n  * The request data should contain a list of usernames or a list of groups to add.\r\n  *\r\n  * @method addActors\r\n  * @memberOf RoleClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {String} opts.roldId Identifier for the role.\r\n  * @param {Array} opts.group Array of group ids.\r\n  * @param {Array} opts.user Array of user ids.\r\n  * @param [callback] Called when the permissions have been returned.\r\n  * @return {Promise} Resolved when the permissions have been returned.\r\n  */\n\n\n  this.addActors = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId + '/actors'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        user: opts.user,\n        group: opts.group\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Removes default actor from the given role.\r\n  *\r\n  * @method removeActor\r\n  * @memberOf RoleClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {String} opts.roldId Identifier for the role.\r\n  * @param {String} opts.group group id.\r\n  * @param {String} opts.user user id.\r\n  * @param [callback] Called when the permissions have been returned.\r\n  * @return {Promise} Resolved when the permissions have been returned.\r\n  */\n\n\n  this.removeActor = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/role/' + opts.roleId + '/actors'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        user: opts.user,\n        group: opts.group\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}