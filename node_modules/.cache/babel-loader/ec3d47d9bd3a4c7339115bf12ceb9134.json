{"ast":null,"code":"var _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js\";\nimport React from 'react';\nimport ProgressBar from './progressBar';\nimport './tableEdit.css';\nexport default {\n  RenderRow: props => {\n    return props.keys.map((key, index) => {\n      return React.createElement(\"td\", {\n        class: \"editRow\",\n        key: props.data[key],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, props.data[key]));\n    });\n  },\n  Design: props => {},\n  RenderProgressRow: props => {\n    return props.keys.map((key, index) => {\n      if (typeof props.data[key] == 'string') {\n        return React.createElement(\"td\", {\n          key: props.data[key],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, props.data[key]);\n      }\n\n      if (typeof props.data[key] != 'string') {\n        if (key == 'issue_count') {\n          let bar = props.data[key] * 100 / props.item.issueCountSum;\n          bar = Math.floor(bar);\n          return React.createElement(ProgressBar.displayProgressBar, {\n            aValue: props.data[key],\n            bar: bar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          });\n        }\n\n        if (key == 'story_Point') {\n          let bar = props.data[key] * 100 / props.item.storyPointSum;\n          bar = Math.floor(bar);\n          return React.createElement(ProgressBar.displayProgressBar, {\n            aValue: props.data[key],\n            bar: bar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          });\n        }\n\n        if (key == 'Original_Estimate_in_days') {\n          let bar = props.data[key] * 100 / props.item.originalSum;\n          bar = Math.floor(bar);\n          return React.createElement(ProgressBar.displayProgressBar, {\n            aValue: props.data[key],\n            bar: bar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          });\n        }\n\n        if (key == 'remaining_Estimate_in_days') {\n          let bar = props.data[key] * 100 / props.item.remainingSum;\n          bar = Math.floor(bar);\n          return React.createElement(ProgressBar.displayProgressBar, {\n            aValue: props.data[key],\n            bar: bar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          });\n        }\n\n        if (key == 'time_Spent_in_days') {\n          let bar = props.data[key] * 100 / props.item.spentSum;\n          bar = Math.floor(bar);\n          return React.createElement(ProgressBar.displayProgressBar, {\n            aValue: props.data[key],\n            bar: bar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          });\n        }\n      }\n    });\n  },\n\n  hello() {}\n\n};\n{\n  /* <td key={key}><b>{key}</b>\n                 <div class=\"progress\">\n                     <div class=\"inside\"><span style={{display:'inline', width:30+'px' }}></span></div>                  \n                 </div><b>100%</b>\n                    \n         </td> */\n}\n{\n  /* <th key={key}>{key.toUpperCase()}</th> */\n}","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js"],"names":["React","ProgressBar","RenderRow","props","keys","map","key","index","data","Design","RenderProgressRow","bar","item","issueCountSum","Math","floor","storyPointSum","originalSum","remainingSum","spentSum","hello"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressBar from './progressBar';\nimport './tableEdit.css';\nexport default{\n    RenderRow:(props)=>{\n        return props.keys.map((key, index)=>{\n        return <td class=\"editRow\" key={props.data[key]}><b>{props.data[key]}</b></td>\n        })\n       },\n\n    Design:(props)=>{\n\n    },\n\n    RenderProgressRow:(props) =>{\n        return props.keys.map((key, index)=>{\n            if(typeof props.data[key] == 'string'){\n                return <td key={props.data[key]}>{props.data[key]}</td>\n            }\n            if(typeof props.data[key] != 'string'){\n                if(key == 'issue_count') {\n                    let bar = props.data[key] * 100 / props.item.issueCountSum;\n                    bar = Math.floor(bar);\n                   return  <ProgressBar.displayProgressBar aValue={props.data[key]} bar={bar}/>\n            \n                }\n                if(key == 'story_Point') {\n                        let bar = props.data[key] * 100 / props.item.storyPointSum;\n                        bar = Math.floor(bar);\n                        \n                        return  <ProgressBar.displayProgressBar aValue={props.data[key]} bar={bar}/>\n                    }\n\n                    if(key == 'Original_Estimate_in_days') {\n                        let bar = props.data[key] * 100 / props.item.originalSum;\n                        bar = Math.floor(bar)\n                        return  <ProgressBar.displayProgressBar aValue={props.data[key]} bar={bar}/>\n                    }\n\n                    if(key == 'remaining_Estimate_in_days') {\n                        let bar = props.data[key] * 100 / props.item.remainingSum;\n                        bar = Math.floor(bar)\n                        return  <ProgressBar.displayProgressBar aValue={props.data[key]} bar={bar}/>\n                    }\n                    \n                    if(key == 'time_Spent_in_days') {\n                        let bar = props.data[key] * 100 / props.item.spentSum;\n                        bar = Math.floor(bar)\n                        return  <ProgressBar.displayProgressBar aValue={props.data[key]} bar={bar}/>\n                    }\n                \n                \n            }\n           \n            \n            })\n           },\n\n           hello(){\n\n           }\n    }\n\n{/* <td key={key}><b>{key}</b>\n                <div class=\"progress\">\n                    <div class=\"inside\"><span style={{display:'inline', width:30+'px' }}></span></div>                  \n                </div><b>100%</b>\n                   \n        </td> */}\n\n\n{/* <th key={key}>{key.toUpperCase()}</th> */}"]},"metadata":{},"sourceType":"module"}