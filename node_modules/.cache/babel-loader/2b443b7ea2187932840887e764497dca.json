{"ast":null,"code":"\"use strict\";\n\nvar errorStrings = require('./../lib/error');\n\nmodule.exports = AttachmentClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/atachment'\r\n *\r\n * @constructor AttachmentClient\r\n * @param {JiraClient} jiraClient\r\n */\n\nfunction AttachmentClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns the meta-data for an attachment, including the URI of the actual attached file.\r\n   *\r\n   * @method getAttachment\r\n   * @memberOf AttachmentClient#\r\n   * @param {Object} opts The options for the API request.\r\n   * @param {string} opts.attachmentId The id of the attachment to retrieve\r\n   * @param {callback} [callback] Called when the attachment metadata is retrieved.\r\n   * @return {Promise} Resolved when the attachment metadata is retrieved.\r\n   */\n\n  this.getAttachment = function (opts, callback) {\n    if (!opts.attachmentId) {\n      throw new Error(errorStrings.NO_ATTACHMENT_ID_ERROR);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/attachment/' + opts.attachmentId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove an attachment from an issue.\r\n   *\r\n   * @method deleteAttachment\r\n   * @memberOf AttachmentClient#\r\n   * @param {Object} opts The options for the API request.\r\n   * @param {string} opts.attachmentId The id of the attachment to delete\r\n   * @param {callback} [callback] Called when the attachment is deleted.\r\n   * @return {Promise} Resolved when the attachment is deleted.\r\n   */\n\n\n  this.deleteAttachment = function (opts, callback) {\n    if (!opts.attachmentId) {\n      throw new Error(errorStrings.NO_ATTACHMENT_ID_ERROR);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/attachment/' + opts.attachmentId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Attachment Deleted');\n  };\n  /**\r\n   * Returns the meta informations for an attachments, specifically if they are enabled and the maximum upload size\r\n   * allowed.\r\n   *\r\n   * @method getGlobalAttachmentMetadata\r\n   * @memberOf AttachmentClient#\r\n   * @param {Object} [opts] This API request actually takes no options; this parameter is ignored.\r\n   * @param {callback} [callback] Called when the metadata is retrieved.\r\n   * @return {Promise} Resolved when the metadata is retrieved.\r\n   */\n\n\n  this.getGlobalAttachmentMetadata = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/attachment/meta'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}