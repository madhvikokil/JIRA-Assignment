{"ast":null,"code":"\"use strict\";\n\nmodule.exports = DashboardClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/dashboard'\r\n * @param {JiraClient} jiraClient\r\n * @constructor DashboardClient\r\n */\n\nfunction DashboardClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Get a list of all dashboards, optionally filtering them.\r\n   *\r\n   * @method getAllDashboards\r\n   * @memberOf DashboardClient#\r\n   * @param [opts] The request options to send to the Jira API\r\n   * @param [opts.filter] An optional filter that is applied to the list of dashboards. Valid values include\r\n   *     \"favourite\" for returning only favourite dashboards, and \"my\" for returning dashboards that are owned by the\r\n   *     calling user.\r\n   * @param [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param [callback] Called when the dashboards have been retrieved.\r\n   * @return {Promise} Resolved when the dashboards have been retrieved.\r\n   */\n\n  this.getAllDashboards = function (opts, callback) {\n    opts = opts || {};\n    var options = {\n      uri: this.jiraClient.buildURL('/dashboard'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        filter: opts.filter,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a single dashboard.\r\n   *\r\n   * @method getDashboard\r\n   * @memberOf DashboardClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.dashboardId The dashboard id.\r\n   * @param [callback] Called when the dashboard has been retrieved\r\n   * @return {Promise} Resolved when the dashboard has been retrieved\r\n   */\n\n\n  this.getDashboard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/dashboard/' + opts.dashboardId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}