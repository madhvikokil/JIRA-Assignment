{"ast":null,"code":"import React from 'react';\nvar width = 400;\nheight = 400;\nmargin = 20; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\nvar radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\nvar svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // Create dummy data\n\nvar data = {\n  a: 9,\n  b: 20,\n  c: 30,\n  d: 8,\n  e: 12\n}; // set the color scale\n\nvar color = d3.scaleOrdinal().domain(data).range(d3.schemeSet2); // Compute the position of each group on the pie:\n\nvar pie = d3.pie().value(function (d) {\n  return d.value;\n});\nvar data_ready = pie(d3.entries(data)); // Now I know that group A goes from 0 degrees to x degrees and so on.\n// shape helper to build arcs:\n\nvar arcGenerator = d3.arc().innerRadius(0).outerRadius(radius); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\nsvg.selectAll('mySlices').data(data_ready).enter().append('path').attr('d', arcGenerator).attr('fill', function (d) {\n  return color(d.data.key);\n}).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7); // Now add the annotation. Use the centroid method to get the best coordinates\n\nsvg.selectAll('mySlices').data(data_ready).enter().append('text').text(function (d) {\n  return \"grp \" + d.data.key;\n}).attr(\"transform\", function (d) {\n  return \"translate(\" + arcGenerator.centroid(d) + \")\";\n}).style(\"text-anchor\", \"middle\").style(\"font-size\", 17);\nexport default Chart;","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/component/chart.js"],"names":["React","width","height","margin","radius","Math","min","svg","d3","select","append","attr","data","a","b","c","d","e","color","scaleOrdinal","domain","range","schemeSet2","pie","value","data_ready","entries","arcGenerator","arc","innerRadius","outerRadius","selectAll","enter","key","style","text","centroid","Chart"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACIC,MAAM,GAAG,GAAT;AACAC,MAAM,GAAG,EAAT,C,CAEJ;;AACA,IAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,MAAhB,IAA0B,CAA1B,GAA8BC,MAA3C,C,CAEA;;AACA,IAAII,GAAG,GAAGC,EAAE,CAACC,MAAH,CAAU,aAAV,EACPC,MADO,CACA,KADA,EAELC,IAFK,CAEA,OAFA,EAESV,KAFT,EAGLU,IAHK,CAGA,QAHA,EAGUT,MAHV,EAIPQ,MAJO,CAIA,GAJA,EAKLC,IALK,CAKA,WALA,EAKa,eAAeV,KAAK,GAAG,CAAvB,GAA2B,GAA3B,GAAiCC,MAAM,GAAG,CAA1C,GAA8C,GAL3D,CAAV,C,CAOA;;AACA,IAAIU,IAAI,GAAG;AAACC,EAAAA,CAAC,EAAE,CAAJ;AAAOC,EAAAA,CAAC,EAAE,EAAV;AAAcC,EAAAA,CAAC,EAAC,EAAhB;AAAoBC,EAAAA,CAAC,EAAC,CAAtB;AAAyBC,EAAAA,CAAC,EAAC;AAA3B,CAAX,C,CAEA;;AACA,IAAIC,KAAK,GAAGV,EAAE,CAACW,YAAH,GACTC,MADS,CACFR,IADE,EAETS,KAFS,CAEHb,EAAE,CAACc,UAFA,CAAZ,C,CAIA;;AACA,IAAIC,GAAG,GAAGf,EAAE,CAACe,GAAH,GACPC,KADO,CACD,UAASR,CAAT,EAAY;AAAC,SAAOA,CAAC,CAACQ,KAAT;AAAiB,CAD7B,CAAV;AAEA,IAAIC,UAAU,GAAGF,GAAG,CAACf,EAAE,CAACkB,OAAH,CAAWd,IAAX,CAAD,CAApB,C,CACA;AAEA;;AACA,IAAIe,YAAY,GAAGnB,EAAE,CAACoB,GAAH,GAChBC,WADgB,CACJ,CADI,EAEhBC,WAFgB,CAEJ1B,MAFI,CAAnB,C,CAIA;;AACAG,GAAG,CACAwB,SADH,CACa,UADb,EAEGnB,IAFH,CAEQa,UAFR,EAGGO,KAHH,GAIGtB,MAJH,CAIU,MAJV,EAKKC,IALL,CAKU,GALV,EAKegB,YALf,EAMKhB,IANL,CAMU,MANV,EAMkB,UAASK,CAAT,EAAW;AAAE,SAAOE,KAAK,CAACF,CAAC,CAACJ,IAAF,CAAOqB,GAAR,CAAZ;AAA2B,CAN1D,EAOKtB,IAPL,CAOU,QAPV,EAOoB,OAPpB,EAQKuB,KARL,CAQW,cARX,EAQ2B,KAR3B,EASKA,KATL,CASW,SATX,EASsB,GATtB,E,CAWA;;AACA3B,GAAG,CACAwB,SADH,CACa,UADb,EAEGnB,IAFH,CAEQa,UAFR,EAGGO,KAHH,GAIGtB,MAJH,CAIU,MAJV,EAKGyB,IALH,CAKQ,UAASnB,CAAT,EAAW;AAAE,SAAO,SAASA,CAAC,CAACJ,IAAF,CAAOqB,GAAvB;AAA2B,CALhD,EAMGtB,IANH,CAMQ,WANR,EAMqB,UAASK,CAAT,EAAY;AAAE,SAAO,eAAeW,YAAY,CAACS,QAAb,CAAsBpB,CAAtB,CAAf,GAA0C,GAAjD;AAAwD,CAN3F,EAOGkB,KAPH,CAOS,aAPT,EAOwB,QAPxB,EAQGA,KARH,CAQS,WART,EAQsB,EARtB;AAUE,eAAeG,KAAf","sourcesContent":["import React from 'react';\n\nvar width = 400\n    height = 400\n    margin = 20\n\n// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\nvar radius = Math.min(width, height) / 2 - margin\n\n// append the svg object to the div called 'my_dataviz'\nvar svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n// Create dummy data\nvar data = {a: 9, b: 20, c:30, d:8, e:12}\n\n// set the color scale\nvar color = d3.scaleOrdinal()\n  .domain(data)\n  .range(d3.schemeSet2);\n\n// Compute the position of each group on the pie:\nvar pie = d3.pie()\n  .value(function(d) {return d.value; })\nvar data_ready = pie(d3.entries(data))\n// Now I know that group A goes from 0 degrees to x degrees and so on.\n\n// shape helper to build arcs:\nvar arcGenerator = d3.arc()\n  .innerRadius(0)\n  .outerRadius(radius)\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\nsvg\n  .selectAll('mySlices')\n  .data(data_ready)\n  .enter()\n  .append('path')\n    .attr('d', arcGenerator)\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n\n// Now add the annotation. Use the centroid method to get the best coordinates\nsvg\n  .selectAll('mySlices')\n  .data(data_ready)\n  .enter()\n  .append('text')\n  .text(function(d){ return \"grp \" + d.data.key})\n  .attr(\"transform\", function(d) { return \"translate(\" + arcGenerator.centroid(d) + \")\";  })\n  .style(\"text-anchor\", \"middle\")\n  .style(\"font-size\", 17)\n\n  export default Chart;\n\n"]},"metadata":{},"sourceType":"module"}