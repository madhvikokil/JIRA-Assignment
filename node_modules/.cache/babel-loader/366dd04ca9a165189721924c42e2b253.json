{"ast":null,"code":"function AsyncResolvers(onFailedOne, onResolvedAll) {\n  this.onResolvedAll = onResolvedAll;\n  this.onFailedOne = onFailedOne;\n  this.resolvers = {};\n  this.resolversCount = 0;\n  this.passed = [];\n  this.failed = [];\n  this.firing = false;\n}\n\nAsyncResolvers.prototype = {\n  /**\n   * Add resolver\n   *\n   * @param {Rule} rule\n   * @return {integer}\n   */\n  add: function (rule) {\n    var index = this.resolversCount;\n    this.resolvers[index] = rule;\n    this.resolversCount++;\n    return index;\n  },\n\n  /**\n   * Resolve given index\n   *\n   * @param  {integer} index\n   * @return {void}\n   */\n  resolve: function (index) {\n    var rule = this.resolvers[index];\n\n    if (rule.passes === true) {\n      this.passed.push(rule);\n    } else if (rule.passes === false) {\n      this.failed.push(rule);\n      this.onFailedOne(rule);\n    }\n\n    this.fire();\n  },\n\n  /**\n   * Determine if all have been resolved\n   *\n   * @return {boolean}\n   */\n  isAllResolved: function () {\n    return this.passed.length + this.failed.length === this.resolversCount;\n  },\n\n  /**\n   * Attempt to fire final all resolved callback if completed\n   *\n   * @return {void}\n   */\n  fire: function () {\n    if (!this.firing) {\n      return;\n    }\n\n    if (this.isAllResolved()) {\n      this.onResolvedAll(this.failed.length === 0);\n    }\n  },\n\n  /**\n   * Enable firing\n   *\n   * @return {void}\n   */\n  enableFiring: function () {\n    this.firing = true;\n  }\n};\nmodule.exports = AsyncResolvers;","map":null,"metadata":{},"sourceType":"script"}