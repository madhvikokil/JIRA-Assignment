{"ast":null,"code":"\"use strict\";\n\nmodule.exports = IssueTypeClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/issuetype'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor IssueTypeClient\r\n */\n\nfunction IssueTypeClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns a list of all issue types visible to the user\r\n   *\r\n   * @method getAllIssueTypes\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} [opts] Ignored\r\n   * @param {callback} [callback] Called when the issue types have been retrieved.\r\n   * @return {Promise} Resolved when the issue types have been retrieved.\r\n   */\n\n  this.getAllIssueTypes = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates an issue type from a JSON representation and adds the issue newly\r\n   * created issue type to the default issue type scheme.\r\n   *\r\n   * @method createIssueType\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} opts Object containing details of the new issueType.\r\n   * @param {string} opts.name The name of the issue type\r\n   * @param {string} [opts.description] The description of the issue type\r\n   * @param {'subtype'|'standard'} [opts.type] The type of the issue type\r\n   * @param {callback} [callback] Called when the issue type has been created.\r\n   * @return {Promise} Resolved when the issue type has been created.\r\n   */\n\n\n  this.createIssueType = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a full representation of the issue type that has the given id.\r\n   *\r\n   * @method getIssueType\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} opts The options sent to the Jira API\r\n   * @param {string} opts.issueTypeId A String containing an issue type id\r\n   * @param {callback} [callback] Called when the issue type has been retrieved.\r\n   * @return {Promise} Resolved when the issue type has been retrieved.\r\n   */\n\n\n  this.getIssueType = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype/' + opts.issueTypeId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Updates the specified issue type from a JSON representation.\r\n   *\r\n   * @method updateIssueType\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} opts The options sent to the Jira API\r\n   * @param {string} opts.issueTypeId ID of the issue type to update.\r\n   * @param {Object} opts.issueType Object containing details of the issueType to be updated.\r\n   * @param {string} [opts.issueType.name] The name of the issue type\r\n   * @param {string} [opts.issueType.avatarId] The id of the avatar for the issue type\r\n   * @param {string} [opts.issueType.description] The description of the issue type\r\n   * @param {callback} [callback] Called when the issue type has been updated.\r\n   * @return {Promise} Resolved when the issue type has been updated.\r\n   */\n\n\n  this.updateIssueType = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype/' + opts.issueTypeId),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.issueType\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes the specified issue type.\r\n   * If the issue type has any associated issues, these issues will be\r\n   * migrated to the alternative issue type specified in the parameter.\r\n   * You can determine the alternative issue types by calling the /rest/api/2/issuetype/{id}/alternatives resource.\r\n   *\r\n   * @method deleteIssueType\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} opts The options to send to the JIRA API\r\n   * @param {string} opts.issueTypeId ID of the issueType to be deleted.\r\n   * @param {string} [opts.alternativeIssueTypeId] the id of an issue type to which issues\r\n   *          associated with the removed issue type will be migrated.\r\n   * @param {callback} [callback] Called when the issue type has been deleted.\r\n   * @return {Promise} Resolved when the issue type has been deleted.\r\n   */\n\n\n  this.deleteIssueType = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype/' + opts.issueTypeId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        alternativeIssueTypeId: opts.alternativeIssueTypeId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of all alternative issue types for the given issue type id.\r\n   * The list will contain these issues types, to which issues assigned to the given\r\n   * issue type can be migrated. The suitable alternatives are issue types which are\r\n   * assigned to the same workflow, the same field configuration and the same screen scheme.\r\n   *\r\n   * @method getAlternativeIssueTypes\r\n   * @memberOf IssueTypeClient#\r\n   * @param {Object} opts The options sent to the Jira API\r\n   * @param {string} opts.issueTypeId A String containing an issue type id\r\n   * @param {callback} [callback] Called when the issue type has been retrieved.\r\n   * @return {Promise} Resolved when the issue type has been retrieved.\r\n   */\n\n\n  this.getAlternativeIssueTypes = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issuetype/' + opts.issueTypeId + '/alternatives'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}