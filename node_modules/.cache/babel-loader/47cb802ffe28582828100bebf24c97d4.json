{"ast":null,"code":"var _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js\";\nimport React from 'react';\nexport default {\n  RenderRow: props => {\n    return props.keys.map((key, index) => {\n      return React.createElement(\"td\", {\n        key: props.data[key],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5\n        },\n        __self: this\n      }, props.data[key]));\n    });\n  },\n  RenderProgressRow: props => {\n    return props.keys.map((key, index) => {\n      if (typeof props.data[key] == 'string') {\n        return React.createElement(\"td\", {\n          key: props.data[key],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, props.data[key]));\n      }\n\n      if (typeof props.data[key] != 'string') {\n        let bar = 0;\n\n        if (props.issueCountSum) {\n          bar = props.data[key] * 100 / props.issueCountSum;\n        }\n\n        return React.createElement(\"td\", {\n          key: props.data[key],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, props.data[key]), React.createElement(\"div\", {\n          class: \"progress\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"inside\",\n          style: {\n            width: \"\".concat(bar) + 'px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, \"p\")), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }));\n      }\n    });\n  }\n};\n{\n  /* <td key={key}><b>{key}</b>\n                 <div class=\"progress\">\n                     <div class=\"inside\"><span style={{display:'inline', width:30+'px' }}></span></div>                  \n                 </div><b>100%</b>\n                    \n         </td> */\n}\n{\n  /* <th key={key}>{key.toUpperCase()}</th> */\n}","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js"],"names":["React","RenderRow","props","keys","map","key","index","data","RenderProgressRow","bar","issueCountSum","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAc;AACVC,EAAAA,SAAS,EAAEC,KAAD,IAAS;AACf,WAAOA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAc;AACpC,aAAO;AAAI,QAAA,GAAG,EAAEJ,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIH,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAJ,CAA1B,CAAP;AACC,KAFM,CAAP;AAGA,GALM;AAOVG,EAAAA,iBAAiB,EAAEN,KAAD,IAAU;AACxB,WAAOA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAc;AAChC,UAAG,OAAOJ,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAP,IAA0B,QAA7B,EAAsC;AAClC,eAAO;AAAI,UAAA,GAAG,EAAEH,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIH,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAJ,CAA1B,CAAP;AACH;;AACD,UAAG,OAAOH,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAP,IAA0B,QAA7B,EAAsC;AAClC,YAAII,GAAG,GAAC,CAAR;;AACA,YAAGP,KAAK,CAACQ,aAAT,EAAuB;AAClBD,UAAAA,GAAG,GAAGP,KAAK,CAACK,IAAN,CAAWF,GAAX,IAAkB,GAAlB,GAAwBH,KAAK,CAACQ,aAApC;AACJ;;AAED,eAAO;AAAI,UAAA,GAAG,EAAER,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIH,KAAK,CAACK,IAAN,CAAWF,GAAX,CAAJ,CAA1B,EAEX;AAAK,UAAA,KAAK,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACQ;AAAK,UAAA,KAAK,EAAC,QAAX;AAAoB,UAAA,KAAK,EAAE;AAACM,YAAAA,KAAK,EAAC,UAAGF,GAAH,IAAS;AAAhB,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADR,CAFW,EAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJC,CAAP;AAMH;AAEA,KAlBE,CAAP;AAmBI;AA3BE,CAAd;AA8BA;AAAC;;;;;;AAKgB;AAGjB;AAAC;AAA6C","sourcesContent":["import React from 'react';\nexport default{\n    RenderRow:(props)=>{\n        return props.keys.map((key, index)=>{\n        return <td key={props.data[key]}><b>{props.data[key]}</b></td>\n        })\n       },\n\n    RenderProgressRow:(props) =>{\n        return props.keys.map((key, index)=>{\n            if(typeof props.data[key] == 'string'){\n                return <td key={props.data[key]}><b>{props.data[key]}</b></td>\n            }\n            if(typeof props.data[key] != 'string'){\n                let bar=0;\n                if(props.issueCountSum){\n                     bar = props.data[key] * 100 / props.issueCountSum;\n                }\n                \n                return <td key={props.data[key]}><b>{props.data[key]}</b>\n                    \n            <div class=\"progress\">\n                    <div class=\"inside\" style={{width:`${bar}`+'px'}}>p</div>                  \n                </div><b></b>\n                   </td>\n            }\n            \n            })\n           }\n    }\n\n{/* <td key={key}><b>{key}</b>\n                <div class=\"progress\">\n                    <div class=\"inside\"><span style={{display:'inline', width:30+'px' }}></span></div>                  \n                </div><b>100%</b>\n                   \n        </td> */}\n\n\n{/* <th key={key}>{key.toUpperCase()}</th> */}"]},"metadata":{},"sourceType":"module"}