{"ast":null,"code":"\"use strict\"; // Core packages\n\nvar url = require('url'); // Npm packages\n\n\nvar request = require('request'); // Custom packages\n\n\nvar applicationProperties = require('./api/application-properties');\n\nvar attachment = require('./api/attachment');\n\nvar auditing = require('./api/auditing');\n\nvar auth = require('./api/auth');\n\nvar avatar = require('./api/avatar');\n\nvar backlog = require('./api/backlog');\n\nvar board = require('./api/board');\n\nvar comment = require('./api/comment');\n\nvar component = require('./api/component');\n\nvar customFieldOption = require('./api/customFieldOption');\n\nvar dashboard = require('./api/dashboard');\n\nvar epic = require('./api/epic');\n\nvar errorStrings = require('./lib/error');\n\nvar field = require('./api/field');\n\nvar filter = require('./api/filter');\n\nvar group = require('./api/group');\n\nvar groupUserPicker = require('./api/groupUserPicker');\n\nvar groups = require('./api/groups');\n\nvar issue = require('./api/issue');\n\nvar issueLink = require('./api/issueLink');\n\nvar issueLinkType = require('./api/issueLinkType');\n\nvar issueType = require('./api/issueType');\n\nvar jql = require('./api/jql');\n\nvar labels = require('./api/labels');\n\nvar licenseRole = require('./api/licenseRole');\n\nvar licenseValidator = require('./api/licenseValidator');\n\nvar myPermissions = require('./api/myPermissions');\n\nvar myPreferences = require('./api/myPreferences');\n\nvar myself = require('./api/myself');\n\nvar oauth_util = require('./lib/oauth_util');\n\nvar password = require('./api/password');\n\nvar permissions = require('./api/permissions');\n\nvar permissionScheme = require('./api/permission-scheme');\n\nvar priority = require('./api/priority');\n\nvar project = require('./api/project');\n\nvar projectCategory = require('./api/projectCategory');\n\nvar projectValidate = require('./api/projectValidate');\n\nvar reindex = require('./api/reindex');\n\nvar resolution = require('./api/resolution');\n\nvar roles = require('./api/roles');\n\nvar screens = require('./api/screens');\n\nvar search = require('./api/search');\n\nvar securityLevel = require('./api/securityLevel');\n\nvar serverInfo = require('./api/serverInfo');\n\nvar settings = require('./api/settings');\n\nvar sprint = require('./api/sprint');\n\nvar status = require('./api/status');\n\nvar statusCategory = require('./api/statusCategory');\n\nvar user = require('./api/user');\n\nvar version = require('./api/version');\n\nvar webhook = require('./api/webhook');\n\nvar workflow = require('./api/workflow');\n\nvar workflowScheme = require('./api/workflowScheme');\n\nvar worklog = require('./api/worklog');\n/**\r\n * @callback callback\r\n * @param {any} err \r\n * @param {any} data\r\n * @returns {void} \r\n */\n\n/**\r\n * Represents a client for the Jira REST API\r\n *\r\n * @constructor JiraClient\r\n * @property {AgileBoardClient} board\r\n * @property {AgileSprintClient} sprint\r\n *\r\n * @property {ApplicationPropertiesClient} applicationProperties\r\n * @property {AttachmentClient} attachment\r\n * @property {AuditingClient} auditing\r\n * @property {AuthClient} auth\r\n * @property {AvatarClient} avatar\r\n * @property {CommentClient} comment\r\n * @property {ComponentClient} component\r\n * @property {CustomFieldOptionClient} customFieldOption\r\n * @property {DashboardClient} dashboard\r\n * @property {FieldClient} field\r\n * @property {FilterClient} filter\r\n * @property {GroupClient} group\r\n * @property {GroupUserPickerClient} groupUserPicker\r\n * @property {GroupsClient} groups\r\n * @property {IssueClient} issue\r\n * @property {IssueLinkClient} issueLink\r\n * @property {IssueLinkTypeClient} issueLinkType\r\n * @property {IssueTypeClient} issueType\r\n * @property {JqlClient} jql\r\n * @property {LabelsClient} labels\r\n * @property {LicenseRoleClient} licenseRole\r\n * @property {LicenseValidatorClient} licenseValidator\r\n * @property {MyPermissionsClient} myPermissions\r\n * @property {MyPreferencesClient} myPreferences\r\n * @property {MyselfClient} myself\r\n * @property {PasswordClient} password\r\n * @property {PermissionsClient} permissions\r\n * @property {PermissionSchemeClient} permissionScheme\r\n * @property {PriorityClient} priority\r\n * @property {ProjectCategoryClient} projectCategory\r\n * @property {ProjectClient} project\r\n * @property {ProjectValidateClient} projectValidate\r\n * @property {ReindexClient} reindex\r\n * @property {ResolutionClient} resolution\r\n * @property {RoleClient} roles\r\n * @property {ScreensClient} screens\r\n * @property {SearchClient} search\r\n * @property {SecurityLevelClient} securityLevel\r\n * @property {ServerInfoClient} serverInfo\r\n * @property {SettingsClient} settings\r\n * @property {StatusCategoryClient} statusCategory\r\n * @property {StatusClient} status\r\n * @property {UserClient} user\r\n * @property {VersionClient} version\r\n * @property {WebhookClient} webhook\r\n * @property {WorkflowClient} workflow\r\n * @property {WorkflowSchemeClient} workflowScheme\r\n * @property {WorklogClient} worklog\r\n *\r\n * @param config The information needed to access the Jira API\r\n * @param {string} config.host The hostname of the Jira API.\r\n * @param {number} [config.timeout] request timeout (milliseconds)\r\n * @param {string} [config.protocol=https] The protocol used to accses the Jira API.\r\n * @param {number} [config.port=443] The port number used to connect to Jira.\r\n * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\"\r\n * @param {boolean} [config.strictSSL=true] It is recommended not to turn it off for no reason (https://github.com/request/request/issues/251).\r\n * @param {string} [config.version=2] The version of the Jira API to which you will be connecting.  Currently, only\r\n *     version 2 is supported.\r\n * @param {Object} [config.basic_auth] The authentication information used tp connect to Jira. Must contain EITHER username and password\r\n *     OR oauth information.  Oauth information will be used over username/password authentication.\r\n * @param {Object} [config.basic_auth.base64] base64 that contains email:api_token.\r\n * @param {string} [config.basic_auth.username] (DEPRECATED) The username of the user that will be authenticated. MUST be included\r\n *     if using username and password authentication.\r\n * @param {string} [config.basic_auth.password] (DEPRECATED) The password of the user that will be authenticated. MUST be included\r\n *     if using username and password authentication.\r\n * @param {string} [config.basic_auth.email] The email of the user that will be authenticated. MUST be included \r\n *     if using email and api_token authentication.\r\n * @param {string} [config.basic_auth.api_token] The api token of the user that will be authenticated. MUST be included \r\n *     if using email and api_token authentication.\r\n * @param {string} [config.oauth.consumer_key] The consumer key used in the Jira Application Link for oauth\r\n *     authentication.  MUST be included if using OAuth.\r\n * @param {string} [config.oauth.private_key] The private key used for OAuth security. MUST be included if using OAuth.\r\n * @param {string} [config.oauth.token] The VERIFIED token used to connect to the Jira API.  MUST be included if using\r\n *     OAuth.\r\n * @param {string} [config.oauth.token_secret] The secret for the above token.  MUST be included if using Oauth.\r\n * @param {CookieJar} [config.cookie_jar] The CookieJar to use for every requests.\r\n * @param {Promise} [config.promise] Any function (constructor) compatible with Promise (bluebird, Q,...).\r\n *      Default - native Promise.\r\n * @param {Request} [config.request] Any function (constructor) compatible with Request (request, supertest,...).\r\n *      Default - require('request').\r\n */\n\n\nvar JiraClient = module.exports = function (config) {\n  if (!config.host) {\n    throw new Error(errorStrings.NO_HOST_ERROR);\n  }\n\n  this.host = config.host;\n  this.timeout = config.timeout;\n  this.protocol = config.protocol ? config.protocol : 'https';\n  this.path_prefix = config.path_prefix ? config.path_prefix : '/';\n  this.port = config.port;\n  this.apiVersion = 2;\n  this.strictSSL = config.hasOwnProperty('strictSSL') ? config.strictSSL : true;\n  this.agileApiVersion = '1.0';\n  this.authApiVersion = '1';\n  this.webhookApiVersion = '1.0';\n  this.promise = config.promise || Promise;\n  this.requestLib = config.request || request;\n  this.rejectUnauthorized = config.rejectUnauthorized;\n\n  if (config.oauth) {\n    if (!config.oauth.consumer_key) {\n      throw new Error(errorStrings.NO_CONSUMER_KEY_ERROR);\n    } else if (!config.oauth.private_key) {\n      throw new Error(errorStrings.NO_PRIVATE_KEY_ERROR);\n    } else if (!config.oauth.token) {\n      throw new Error(errorStrings.NO_OAUTH_TOKEN_ERROR);\n    } else if (!config.oauth.token_secret) {\n      throw new Error(errorStrings.NO_OAUTH_TOKEN_SECRET_ERROR);\n    }\n\n    this.oauthConfig = config.oauth;\n    this.oauthConfig.signature_method = 'RSA-SHA1';\n  } else if (config.basic_auth) {\n    if (config.basic_auth.base64) {\n      this.basic_auth = {\n        base64: config.basic_auth.base64\n      };\n    } else if (config.basic_auth.api_token || config.basic_auth.email) {\n      if (!config.basic_auth.email) {\n        throw new Error(errorStrings.NO_EMAIL_ERROR);\n      } else if (!config.basic_auth.api_token) {\n        throw new Error(errorStrings.NO_APITOKEN_ERROR);\n      }\n\n      this.basic_auth = {\n        user: config.basic_auth.email,\n        pass: config.basic_auth.api_token\n      };\n    } else {\n      if (!config.basic_auth.username) {\n        throw new Error(errorStrings.NO_USERNAME_ERROR);\n      } else if (!config.basic_auth.password) {\n        throw new Error(errorStrings.NO_PASSWORD_ERROR);\n      }\n\n      this.basic_auth = {\n        user: config.basic_auth.username,\n        pass: config.basic_auth.password\n      };\n    }\n  }\n\n  if (config.cookie_jar) {\n    this.cookie_jar = config.cookie_jar;\n  }\n\n  this.applicationProperties = new applicationProperties(this);\n  this.attachment = new attachment(this);\n  this.auditing = new auditing(this);\n  this.auth = new auth(this);\n  this.avatar = new avatar(this);\n  this.backlog = new backlog(this);\n  this.board = new board(this);\n  this.comment = new comment(this);\n  this.component = new component(this);\n  this.customFieldOption = new customFieldOption(this);\n  this.dashboard = new dashboard(this);\n  this.epic = new epic(this);\n  this.field = new field(this);\n  this.filter = new filter(this);\n  this.group = new group(this);\n  this.groupUserPicker = new groupUserPicker(this);\n  this.groups = new groups(this);\n  this.issue = new issue(this);\n  this.issueLink = new issueLink(this);\n  this.issueLinkType = new issueLinkType(this);\n  this.issueType = new issueType(this);\n  this.jql = new jql(this);\n  this.labels = new labels(this);\n  this.licenseRole = new licenseRole(this);\n  this.licenseValidator = new licenseValidator(this);\n  this.myPermissions = new myPermissions(this);\n  this.myPreferences = new myPreferences(this);\n  this.myself = new myself(this);\n  this.password = new password(this);\n  this.permissions = new permissions(this);\n  this.permissionScheme = new permissionScheme(this);\n  this.priority = new priority(this);\n  this.project = new project(this);\n  this.projectCategory = new projectCategory(this);\n  this.projectValidate = new projectValidate(this);\n  this.reindex = new reindex(this);\n  this.resolution = new resolution(this);\n  this.roles = new roles(this);\n  this.screens = new screens(this);\n  this.search = new search(this);\n  this.securityLevel = new securityLevel(this);\n  this.serverInfo = new serverInfo(this);\n  this.settings = new settings(this);\n  this.sprint = new sprint(this);\n  this.status = new status(this);\n  this.statusCategory = new statusCategory(this);\n  this.user = new user(this);\n  this.version = new version(this);\n  this.webhook = new webhook(this);\n  this.workflow = new workflow(this);\n  this.workflowScheme = new workflowScheme(this);\n  this.worklog = new worklog(this);\n};\n\n(function () {\n  /**\r\n   * Simple utility to build a REST endpoint URL for the Jira API.\r\n   *\r\n   * @method buildURL\r\n   * @memberOf JiraClient#\r\n   * @param path The path of the URL without concern for the root of the REST API.\r\n   * @param {string | number} [forcedVersion] Use this param to force a particular version\r\n   * @returns {string} The constructed URL.\r\n   */\n  this.buildURL = function (path, forcedVersion) {\n    var apiBasePath = this.path_prefix + 'rest/api/';\n    var version = forcedVersion || this.apiVersion;\n    var requestUrl = url.format({\n      protocol: this.protocol,\n      hostname: this.host,\n      port: this.port,\n      pathname: apiBasePath + version + path\n    });\n    return decodeURIComponent(requestUrl);\n  };\n  /**\r\n   * Simple utility to build a REST endpoint URL for the Jira Agile API.\r\n   *\r\n   * @method buildAgileURL\r\n   * @memberOf JiraClient#\r\n   * @param path The path of the URL without concern for the root of the REST API.\r\n   * @param {string | number} [forcedVersion] Use this param to force a particular version\r\n   * @returns {string} The constructed URL.\r\n   */\n\n\n  this.buildAgileURL = function (path, forcedVersion) {\n    var apiBasePath = this.path_prefix + 'rest/agile/';\n    var version = forcedVersion || this.agileApiVersion;\n    var requestUrl = url.format({\n      protocol: this.protocol,\n      hostname: this.host,\n      port: this.port,\n      pathname: apiBasePath + version + path\n    });\n    return decodeURIComponent(requestUrl);\n  };\n  /**\r\n   * Simple utility to build a REST endpoint URL for the Jira Auth API.\r\n   *\r\n   * @method buildAuthURL\r\n   * @memberOf JiraClient#\r\n   * @param path The path of the URL without concern for the root of the REST API.\r\n   * @param {string | number} [forcedVersion] Use this param to force a particular version\r\n   * @returns {string} The constructed URL.\r\n   */\n\n\n  this.buildAuthURL = function (path, forcedVersion) {\n    var apiBasePath = this.path_prefix + 'rest/auth/';\n    var version = forcedVersion || this.authApiVersion;\n    var requestUrl = url.format({\n      protocol: this.protocol,\n      hostname: this.host,\n      port: this.port,\n      pathname: apiBasePath + version + path\n    });\n    return decodeURIComponent(requestUrl);\n  };\n  /**\r\n   * Simple utility to build a REST endpoint URL for the Jira webhook API.\r\n   *\r\n   * @method buildWebhookURL\r\n   * @memberOf JiraClient#\r\n   * @param path The path of the URL without concern for the root of the REST API.\r\n   * @param {string | number} [forcedVersion] Use this param to force a particular version\r\n   * @returns {string} The constructed URL.\r\n   */\n\n\n  this.buildWebhookURL = function (path, forcedVersion) {\n    var apiBasePath = this.path_prefix + 'rest/webhooks/';\n    var version = forcedVersion || this.webhookApiVersion;\n    var requestUrl = url.format({\n      protocol: this.protocol,\n      hostname: this.host,\n      port: this.port,\n      pathname: apiBasePath + version + path\n    });\n    return decodeURIComponent(requestUrl);\n  };\n  /**\r\n   * Make a request to the Jira API and call back with it's response.\r\n   *\r\n   * @method makeRequest\r\n   * @memberOf JiraClient#\r\n   * @param options The request options.\r\n   * @param {callback} [callback] Called with the APIs response.\r\n   * @param {string} [successString] If supplied, this is reported instead of the response body.\r\n   * @return {Promise} Resolved with APIs response or rejected with error\r\n   */\n\n\n  this.makeRequest = function (options, callback, successString) {\n    let requestLib = this.requestLib;\n    options.rejectUnauthorized = this.rejectUnauthorized;\n    options.strictSSL = this.strictSSL;\n    options.timeout = this.timeout;\n\n    if (this.oauthConfig) {\n      options.oauth = this.oauthConfig;\n    } else if (this.basic_auth) {\n      if (this.basic_auth.base64) {\n        if (!options.headers) {\n          options.headers = {};\n        }\n\n        options.headers['Authorization'] = 'Basic ' + this.basic_auth.base64;\n      } else {\n        options.auth = this.basic_auth;\n      }\n    }\n\n    if (this.cookie_jar) {\n      options.jar = this.cookie_jar;\n    }\n\n    if (callback) {\n      requestLib(options, function (err, response, body) {\n        if (err || response.statusCode < 200 || response.statusCode > 399) {\n          return callback(err ? err : body, null, response);\n        }\n\n        if (typeof body === 'string') {\n          try {\n            body = JSON.parse(body);\n          } catch (jsonErr) {\n            return callback(jsonErr, null, response);\n          }\n        }\n\n        return callback(null, successString ? successString : body, response);\n      });\n    } else if (this.promise) {\n      return new this.promise(function (resolve, reject) {\n        var req = requestLib(options);\n        var requestObj = null;\n        req.on('request', function (request) {\n          requestObj = request;\n        });\n        req.on('response', function (response) {\n          // Saving error\n          var error = response.statusCode < 200 || response.statusCode > 399; // Collecting data\n\n          var body = [];\n          var push = body.push.bind(body);\n          response.on('data', push); // Data collected\n\n          response.on('end', function () {\n            var result = body.join(''); // Parsing JSON\n\n            if (result[0] === '[' || result[0] === '{') {\n              try {\n                result = JSON.parse(result);\n              } catch (e) {// nothing to do\n              }\n            }\n\n            if (error) {\n              response.body = result;\n\n              if (options.debug) {\n                reject({\n                  result: JSON.stringify(response),\n                  debug: {\n                    options: options,\n                    request: {\n                      headers: requestObj._headers\n                    },\n                    response: {\n                      headers: response.headers\n                    }\n                  }\n                });\n              } else {\n                reject(JSON.stringify(response));\n              }\n\n              return;\n            }\n\n            if (options.debug) {\n              resolve({\n                result,\n                debug: {\n                  options: options,\n                  request: {\n                    headers: requestObj._headers\n                  },\n                  response: {\n                    headers: response.headers\n                  }\n                }\n              });\n            } else {\n              resolve(result);\n            }\n          });\n        });\n        req.on('error', reject);\n      });\n    }\n  };\n}).call(JiraClient.prototype);\nJiraClient.oauth_util = require('./lib/oauth_util');\nexports.oauth_util = oauth_util;","map":null,"metadata":{},"sourceType":"script"}