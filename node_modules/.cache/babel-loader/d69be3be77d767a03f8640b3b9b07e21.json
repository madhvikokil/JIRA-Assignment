{"ast":null,"code":"\"use strict\";\n\nmodule.exports = MyselfClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/myself'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor MyselfClient\r\n */\n\nfunction MyselfClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns currently logged user. This resource cannot be accessed anonymously.\r\n   *\r\n   * @method getMyself\r\n   * @memberOf MyselfClient#\r\n   * @param opts Ignored\r\n   * @param [callback] Called when the current user is retrieved.\r\n   * @return {Promise} Resolved when the current user is retrieved.\r\n   */\n\n  this.getMyself = function (debug, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/myself'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      debug: debug\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify currently logged user. The \"value\" fields present will override the existing value. Fields skipped in\r\n   * request will not be changed. Only email and display name can be change that way.\r\n   *\r\n   * @method editMyself\r\n   * @memberOf MyselfClient#\r\n   * @param opts The request options send to the Jira API.\r\n   * @param opts.newData The new data.  See {@link https://docs.atlassian.com/jira/REST/latest/#d2e1242}\r\n   * @param [callback] Called when the user's data has been modified\r\n   * @return {Promise} Resolved when the user's data has been modified\r\n   */\n\n\n  this.editMyself = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/myself'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.newData\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify caller password.\r\n   *\r\n   * @method changePassword\r\n   * @memberOf MyselfClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.newData The new data\r\n   * @param [callback] Called when the password has been changed.\r\n   * @return {Promise} Resolved when the password has been changed.\r\n   */\n\n\n  this.changePassword = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/myself/password'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.newData\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}