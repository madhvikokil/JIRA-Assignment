{"ast":null,"code":"\"use strict\";\n\nmodule.exports = PermissionSchemeClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/permissionscheme'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor PermissionSchemeClient\r\n */\n\nfunction PermissionSchemeClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns a list of all permission schemes.\r\n   *\r\n   * By default only shortened beans are returned.\r\n   * If you want to include permissions of all the schemes, then specify the permissions expand parameter.\r\n   * Permissions will be included also if you specify any other expand parameter.\r\n   *\r\n   * @method getAllPermissionSchemes\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {String|Array} opts.expand\r\n   * @param [callback] Called when the schemes have been returned.\r\n   * @return {Promise} Resolved when the schemes have been returned.\r\n   */\n\n  this.getAllPermissionSchemes = function (opts, callback) {\n    var expand = opts.expand;\n\n    if (opts.expand && opts.expand instanceof Array) {\n      expand = opts.expand.join(',');\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        expand: expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Create a new permission scheme. This method can create schemes with a defined permission set, or without.\r\n   *\r\n   * @method createPermissionScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.scheme See {@link https://developer.atlassian.com/cloud/jira/platform/rest/#api-api-2-permissionscheme-post}\r\n   * @param [callback] Called when the scheme has been created.\r\n   * @return {Promise} Resolved when the scheme has been created.\r\n   */\n\n\n  this.createPermissionScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.scheme\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a PermissionScheme. This resource cannot be accessed anonymously.\r\n   *\r\n   * @method getPermissionScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The id of the scheme to retrieve.\r\n   * @param {Object} opts.expand The fields to be expanded.\r\n   * @param [callback] Called when the scheme has been retrieved.\r\n   * @return {Promise} Resolved when the scheme has been retrieved.\r\n   */\n\n\n  this.getPermissionScheme = function (opts, callback) {\n    var expand = opts.expand;\n\n    if (opts.expand && opts.expand instanceof Array) {\n      expand = opts.expand.join(',');\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        expand: expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Updates a permission scheme.\r\n   * \r\n   * If the permissions list is present then it will be set in the permission scheme,\r\n   * which basically means it will overwrite any permission grants that existed in the permission scheme.\r\n   * Sending an empty list will remove all permission grants from the permission scheme.\r\n   * \r\n   * To update just the name and description, do not send permissions list at all.\r\n   * To add or remove a single permission grant instead of updating the whole list\r\n   * at once use the {schemeId}/permission/ resource.\r\n   *\r\n   * @method editPermissionScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The id of the scheme to retrieve.\r\n   * @param opts.scheme The body of the scheme to edit.\r\n   * @param [callback] Called when the user has been edited.\r\n   * @return {Promise} Resolved when the user has been edited.\r\n   */\n\n\n  this.editPermissionScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.scheme\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes Permission Scheme.\r\n   *\r\n   * @method deletePermissionScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The name of the scheme to delete.\r\n   * @param [callback] Called when the scheme has been deleted.\r\n   * @return {Promise} Resolved when the scheme has been deleted.\r\n   */\n\n\n  this.deletePermissionScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Permission Scheme removed.');\n  };\n  /**\r\n   * Returns all permission grants of the given permission scheme.\r\n   *\r\n   * @method getPermissionSchemeGrants\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The id of the scheme to which the permission grant belongs.\r\n   * @param {Object} opts.expand The fields to be expanded.\r\n   * @param [callback] Called when the scheme grants have been retrieved.\r\n   * @return {Promise} Resolved when the scheme grants have been retrieved.\r\n   */\n\n\n  this.getPermissionSchemeGrants = function (opts, callback) {\n    var expand = opts.expand;\n\n    if (opts.expand && opts.expand instanceof Array) {\n      expand = opts.expand.join(',');\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId + '/permission'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        expand: expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates a permission grant in a permission scheme.\r\n   *\r\n   * @method createPermissionGrantInScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.schemeId The id of the scheme to which the permission grant belongs.\r\n   * @param opts.grant See {@link https://docs.atlassian.com/software/jira/docs/api/REST/7.6.1/#api/2/permissionscheme-createPermissionGrant}\r\n   * @param [callback] Called when the permission grant has been created.\r\n   * @return {Promise} Resolved when the permission grant has been created.\r\n   */\n\n\n  this.createPermissionGrantInScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId + '/permission'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.grant\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes a permission grant from a permission scheme.\r\n   *\r\n   * @method deletePermissionGrantFromScheme\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The name of the scheme to delete.\r\n   * @param opts.permissionId The id of the permission to delete.\r\n   * @param [callback] Called when the scheme has been deleted.\r\n   * @return {Promise} Resolved when the scheme has been deleted.\r\n   */\n\n\n  this.deletePermissionGrantFromScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId + '/permission/' + opts.permissionId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Permission removed from scheme.');\n  };\n  /**\r\n   * Returns a permission grant identified by the given id.\r\n   *\r\n   * @method getPermissionSchemeGrantById\r\n   * @memberOf PermissionSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.schemeId The id of the scheme to which the permission grant belongs.\r\n   * @param opts.permissionId The id of the permission to fetch.\r\n   * @param {Object} opts.expand The fields to be expanded.\r\n   * @param [callback] Called when the scheme grants have been retrieved.\r\n   * @return {Promise} Resolved when the scheme grants have been retrieved.\r\n   */\n\n\n  this.getPermissionSchemeGrantById = function (opts, callback) {\n    var expand = opts.expand;\n\n    if (opts.expand && opts.expand instanceof Array) {\n      expand = opts.expand.join(',');\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/permissionscheme/' + opts.schemeId + '/permission/' + opts.permissionId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        expand: expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}