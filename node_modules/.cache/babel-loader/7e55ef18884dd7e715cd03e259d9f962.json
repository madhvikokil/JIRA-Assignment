{"ast":null,"code":"import _defineProperty from \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/container/login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Button, Form, Grid, Header, Segment, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport superagent from 'superagent';\nimport FetchApi from '../utility/fetchApi';\nimport Validator from \"validatorjs\";\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        email: '',\n        password: '',\n        url: ''\n      },\n      errorMessage: {\n        email: '',\n        password: '',\n        url: ''\n      }\n    };\n\n    this.validate = () => {\n      const rules = {\n        email: 'required|email',\n        password: 'required',\n        url: 'required'\n      };\n      let validation = new Validator(this.state.form, rules);\n      let isError = validation.fails();\n      this.setState({\n        errorMessage: validation.errors.errors\n      });\n      return isError;\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n\n      if (!this.validate()) {\n        console.log(\"here\");\n        alert(\"hooo\");\n      } else {\n        let a = window.btoa(\"\".concat(this.state.email, \":\").concat(this.state.password));\n        console.log(a);\n        localStorage.setItem('token', a);\n        superagent.get(\"\".concat(this.state.url, \"/rest/api/3/project\")).set('Access-Control-Allow-Credentials', '*').set('Accept', 'application/json').set('Authorization', \"Basic \".concat(a)).end((err, res) => {\n          if (err) {\n            return alert(\"Invalid User\", err);\n          }\n\n          localStorage.setItem('url', \"\".concat(this.state.url));\n          console.log(\"response : \", res.body);\n          console.log(\"Table routing\");\n          alert(\"Successfully Logged...\");\n          this.props.history.push('/tableSheet');\n        });\n      }\n    };\n\n    this.routeToTables = () => {\n      // if(this.state.email==null || this.state.password==null || this.state.url== null){\n      //     alert(\"Fill the details...\");\n      // }\n      let a = window.btoa(\"\".concat(this.state.email, \":\").concat(this.state.password));\n      console.log(a);\n      localStorage.setItem('token', a);\n      superagent.get(\"\".concat(this.state.url, \"/rest/api/3/project\")).set('Access-Control-Allow-Credentials', '*').set('Accept', 'application/json').set('Authorization', \"Basic \".concat(a)).end((err, res) => {\n        if (err) {\n          return alert(\"Invalid User\", err);\n        }\n\n        localStorage.setItem('url', \"\".concat(this.state.url));\n        console.log(\"response : \", res.body);\n        console.log(\"Table routing\");\n        alert(\"Successfully Logged...\");\n        this.props.history.push('/tableSheet');\n      });\n    };\n\n    this.getValidationMessages = () => {\n      let validationMessages = [];\n\n      if (this.state.errorMessage.email) {\n        validationMessages.push(React.createElement(Message, {\n          key: \"1\",\n          size: \"mini\",\n          error: true,\n          content: this.state.errorMessage.email,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }));\n      }\n\n      if (this.state.errorMessage.password) {\n        validationMessages.push(React.createElement(Message, {\n          key: \"2\",\n          size: \"mini\",\n          error: true,\n          content: this.state.errorMessage.password,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }));\n      }\n\n      if (this.state.errorMessage.url) {\n        validationMessages.push(React.createElement(Message, {\n          key: \"3\",\n          size: \"mini\",\n          error: true,\n          content: this.state.errorMessage.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n      }\n\n      return validationMessages;\n    };\n\n    this.changeEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.changePassword = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.changeUrl = event => {\n      this.setState({\n        url: event.target.value\n      });\n    };\n\n    this.changeHandler = e => {\n      let form = _objectSpread({}, this.state.form); //console.log(e.target.name);\n\n\n      form[e.target.name] = e.target.value; //console.log(e.target.value);\n\n      this.setState({\n        form\n      });\n      const rules = {\n        email: 'required|email',\n        password: 'required|min:6|max:15',\n        name: 'required'\n      };\n      let validation = new Validator(_objectSpread({}, this.state.form, {\n        [e.target.name]: e.target.value\n      }), rules);\n      let isError = validation.fails();\n      this.setState({\n        errorMessage: validation.errors.errors\n      });\n      return isError;\n    };\n  }\n\n  render() {\n    let validationMessages = this.getValidationMessages();\n    let formData = React.createElement(React.Fragment, null, validationMessages.length ? React.createElement(Segment, {\n      style: {\n        display: \"block\"\n      },\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, [...validationMessages]) : null, React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h1\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Log-in to your account\"), React.createElement(Form, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      fluid: true,\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"E-mail address\",\n      onChange: this.changeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Token\",\n      type: \"token\",\n      onChange: this.changeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"URL\",\n      type: \"url\",\n      onChange: this.changeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      onClick: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Login\"))))));\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, formData) //         <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n    //         <Grid.Column style={{ maxWidth: 450 }}>\n    //             <Header as='h1' color='teal' textAlign='center'>\n    //             Log-in to your account\n    //             </Header>\n    //                 <Form size='large'>\n    //                     <Segment stacked>\n    //                 <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' onChange={this.changeEmail}/>\n    //                 <Form.Input\n    //                 fluid\n    //                 icon='lock'\n    //                 iconPosition='left'\n    //                 placeholder='Token'\n    //                 type='token'\n    //                 onChange={this.changePassword}\n    //                 />\n    //                 <Form.Input\n    //                 fluid\n    //                 icon='lock'\n    //                 iconPosition='left'\n    //                 placeholder='URL'\n    //                 type='url'\n    //                 onChange={this.changeUrl}\n    //                 />\n    //                 <Button color='teal' fluid size='large' onClick={this.submitHandler}>\n    //                     Login\n    //                 </Button>\n    //                 </Segment>\n    //             </Form>\n    //   {/* <Message>\n    //      New to us? <a href='#'>Sign Up</a> \n    //   </Message> */}\n    //         </Grid.Column>\n    //         </Grid>\n    ;\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/container/login.js"],"names":["React","Button","Form","Grid","Header","Segment","Message","superagent","FetchApi","Validator","Login","Component","state","form","email","password","url","errorMessage","validate","rules","validation","isError","fails","setState","errors","submitHandler","event","preventDefault","console","log","alert","a","window","btoa","localStorage","setItem","get","set","end","err","res","body","props","history","push","routeToTables","getValidationMessages","validationMessages","changeEmail","target","value","changePassword","changeUrl","changeHandler","e","name","render","formData","length","display","height","maxWidth","error","message"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA6CC,OAA7C,QAA4D,mBAA5D;AACA,OAAO,kCAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,KAAN,SAAoBV,KAAK,CAACW,SAA1B,CAAmC;AAAA;AAAA;AAAA,SAE/BC,KAF+B,GAExB;AACHC,MAAAA,IAAI,EAAC;AACDC,QAAAA,KAAK,EAAC,EADL;AAELC,QAAAA,QAAQ,EAAC,EAFJ;AAGLC,QAAAA,GAAG,EAAC;AAHC,OADF;AAKHC,MAAAA,YAAY,EAAC;AACTH,QAAAA,KAAK,EAAC,EADG;AAETC,QAAAA,QAAQ,EAAC,EAFA;AAGTC,QAAAA,GAAG,EAAC;AAHK;AALV,KAFwB;;AAAA,SAc/BE,QAd+B,GAcpB,MAAM;AACb,YAAMC,KAAK,GAAG;AACZL,QAAAA,KAAK,EAAE,gBADK;AAEZC,QAAAA,QAAQ,EAAE,UAFE;AAGZC,QAAAA,GAAG,EAAE;AAHO,OAAd;AAMA,UAAII,UAAU,GAAG,IAAIX,SAAJ,CAAc,KAAKG,KAAL,CAAWC,IAAzB,EAA+BM,KAA/B,CAAjB;AACA,UAAIE,OAAO,GAAGD,UAAU,CAACE,KAAX,EAAd;AACA,WAAKC,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAEG,UAAU,CAACI,MAAX,CAAkBA;AAAlC,OAAd;AACA,aAAOH,OAAP;AACH,KAzB8B;;AAAA,SA2B/BI,aA3B+B,GA2BfC,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAG,CAAC,KAAKT,QAAL,EAAJ,EAAqB;AACjBU,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAC,QAAAA,KAAK,CAAC,MAAD,CAAL;AACH,OAHD,MAII;AACA,YAAIC,CAAC,GAAGC,MAAM,CAACC,IAAP,WAAe,KAAKrB,KAAL,CAAWE,KAA1B,cAAmC,KAAKF,KAAL,CAAWG,QAA9C,EAAR;AACJa,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAG,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BJ,CAA7B;AACAxB,QAAAA,UAAU,CACL6B,GADL,WACY,KAAKxB,KAAL,CAAWI,GADvB,0BAEKqB,GAFL,CAES,kCAFT,EAE6C,GAF7C,EAGKA,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKA,GAJL,CAIS,eAJT,kBAImCN,CAJnC,GAKKO,GALL,CAKS,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,cAAID,GAAJ,EAAS;AAAE,mBAAOT,KAAK,CAAC,cAAD,EAAgBS,GAAhB,CAAZ;AAAiC;;AAC5CL,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,YAA8B,KAAKvB,KAAL,CAAWI,GAAzC;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BW,GAAG,CAACC,IAA9B;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAC,UAAAA,KAAK,CAAC,wBAAD,CAAL;AACA,eAAKY,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,aAAxB;AAEH,SAbL;AAcC;AACA,KApD0B;;AAAA,SAwD/BC,aAxD+B,GAwDf,MAAM;AAElB;AACA;AACA;AACA,UAAId,CAAC,GAAGC,MAAM,CAACC,IAAP,WAAe,KAAKrB,KAAL,CAAWE,KAA1B,cAAmC,KAAKF,KAAL,CAAWG,QAA9C,EAAR;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BJ,CAA7B;AACAxB,MAAAA,UAAU,CACL6B,GADL,WACY,KAAKxB,KAAL,CAAWI,GADvB,0BAEKqB,GAFL,CAES,kCAFT,EAE6C,GAF7C,EAGKA,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKA,GAJL,CAIS,eAJT,kBAImCN,CAJnC,GAKKO,GALL,CAKS,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,YAAID,GAAJ,EAAS;AAAE,iBAAOT,KAAK,CAAC,cAAD,EAAgBS,GAAhB,CAAZ;AAAiC;;AAC5CL,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,YAA8B,KAAKvB,KAAL,CAAWI,GAAzC;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BW,GAAG,CAACC,IAA9B;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAC,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACA,aAAKY,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,aAAxB;AAEH,OAbL;AAcH,KA9E8B;;AAAA,SAgF/BE,qBAhF+B,GAgFP,MAAM;AAC1B,UAAIC,kBAAkB,GAAG,EAAzB;;AACA,UAAI,KAAKnC,KAAL,CAAWK,YAAX,CAAwBH,KAA5B,EAAmC;AACjCiC,QAAAA,kBAAkB,CAACH,IAAnB,CAAwB,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAC,GAAb;AACtB,UAAA,IAAI,EAAC,MADiB;AAEtB,UAAA,KAAK,MAFiB;AAGtB,UAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWK,YAAX,CAAwBH,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAxB;AAID;;AACD,UAAI,KAAKF,KAAL,CAAWK,YAAX,CAAwBF,QAA5B,EAAsC;AACpCgC,QAAAA,kBAAkB,CAACH,IAAnB,CAAwB,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAC,GAAb;AACtB,UAAA,IAAI,EAAC,MADiB;AAEtB,UAAA,KAAK,MAFiB;AAGtB,UAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWK,YAAX,CAAwBF,QAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAxB;AAID;;AACD,UAAI,KAAKH,KAAL,CAAWK,YAAX,CAAwBD,GAA5B,EAAiC;AAC/B+B,QAAAA,kBAAkB,CAACH,IAAnB,CAAwB,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAC,GAAb;AACtB,UAAA,IAAI,EAAC,MADiB;AAEtB,UAAA,KAAK,MAFiB;AAGtB,UAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWK,YAAX,CAAwBD,GAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAxB;AAID;;AACD,aAAO+B,kBAAP;AACD,KArG4B;;AAAA,SAuG/BC,WAvG+B,GAuGhBtB,KAAD,IAAW;AACrB,WAAKH,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAGY,KAAK,CAACuB,MAAN,CAAaC;AAAtB,OAAd;AACH,KAzG8B;;AAAA,SA2G/BC,cA3G+B,GA2GbzB,KAAD,IAAW;AACxB,WAAKH,QAAL,CAAc;AAACR,QAAAA,QAAQ,EAAGW,KAAK,CAACuB,MAAN,CAAaC;AAAzB,OAAd;AACH,KA7G8B;;AAAA,SA+G/BE,SA/G+B,GA+GlB1B,KAAD,IAAW;AACnB,WAAKH,QAAL,CAAc;AAACP,QAAAA,GAAG,EAAGU,KAAK,CAACuB,MAAN,CAAaC;AAApB,OAAd;AACH,KAjH8B;;AAAA,SAmH/BG,aAnH+B,GAmHdC,CAAD,IAAO;AACnB,UAAIzC,IAAI,qBAAQ,KAAKD,KAAL,CAAWC,IAAnB,CAAR,CADmB,CAEnB;;;AACAA,MAAAA,IAAI,CAACyC,CAAC,CAACL,MAAF,CAASM,IAAV,CAAJ,GAAsBD,CAAC,CAACL,MAAF,CAASC,KAA/B,CAHmB,CAInB;;AACA,WAAK3B,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACA,YAAMM,KAAK,GAAG;AACVL,QAAAA,KAAK,EAAE,gBADG;AAEVC,QAAAA,QAAQ,EAAE,uBAFA;AAGVwC,QAAAA,IAAI,EAAE;AAHI,OAAd;AAME,UAAInC,UAAU,GAAG,IAAIX,SAAJ,mBAAmB,KAAKG,KAAL,CAAWC,IAA9B;AAAoC,SAACyC,CAAC,CAACL,MAAF,CAASM,IAAV,GAAiBD,CAAC,CAACL,MAAF,CAASC;AAA9D,UAAuE/B,KAAvE,CAAjB;AACA,UAAIE,OAAO,GAAGD,UAAU,CAACE,KAAX,EAAd;AACA,WAAKC,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAEG,UAAU,CAACI,MAAX,CAAkBA;AAAlC,OAAd;AACA,aAAOH,OAAP;AACH,KAnI4B;AAAA;;AAqI/BmC,EAAAA,MAAM,GAAE;AACJ,QAAIT,kBAAkB,GAAG,KAAKD,qBAAL,EAAzB;AACA,QAAIW,QAAQ,GAAI,0CAEXV,kBAAkB,CAACW,MAAnB,GAA4B,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAhB;AAAsC,MAAA,OAAO,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAChC,CAAC,GAAGZ,kBAAJ,CADgC,CAA5B,GAEM,IAJK,EAKhB,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAyB,MAAA,KAAK,EAAE;AAAEa,QAAAA,MAAM,EAAE;AAAV,OAAhC;AAAqD,MAAA,aAAa,EAAC,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,KAAK,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAIQ,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,OAAO,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ,oBAAC,IAAD,CAAM,KAAN;AACA,MAAA,KAAK,MADL;AACM,MAAA,IAAI,EAAC,MADX;AAEA,MAAA,YAAY,EAAC,MAFb;AAGA,MAAA,WAAW,EAAC,gBAHZ;AAIC,MAAA,QAAQ,EAAE,KAAKR,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI,EAOJ,oBAAC,IAAD,CAAM,KAAN;AACA,MAAA,KAAK,MADL;AAEA,MAAA,IAAI,EAAC,MAFL;AAGA,MAAA,YAAY,EAAC,MAHb;AAIA,MAAA,WAAW,EAAC,OAJZ;AAKA,MAAA,IAAI,EAAC,OALL;AAMA,MAAA,QAAQ,EAAE,KAAKA,aANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPI,EAgBJ,oBAAC,IAAD,CAAM,KAAN;AACA,MAAA,KAAK,MADL;AAEA,MAAA,IAAI,EAAC,MAFL;AAGA,MAAA,YAAY,EAAC,MAHb;AAIA,MAAA,WAAW,EAAC,KAJZ;AAKA,MAAA,IAAI,EAAC,KALL;AAMA,MAAA,QAAQ,EAAE,KAAKA,aANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBI,EAwBJ,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,KAAK,MAA1B;AAA2B,MAAA,IAAI,EAAC,OAAhC;AAAwC,MAAA,OAAO,EAAE,KAAK5B,aAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxBI,CADJ,CAJR,CADA,CALgB,CAAhB;AA6CA,QAAIR,YAAY,GAAG,IAAnB;;AAEA,QAAI,KAAKyB,KAAL,CAAWoB,KAAf,EAAsB;AACtB7C,MAAAA,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKyB,KAAL,CAAWoB,KAAX,CAAiBC,OAArB,CADJ;AAGC;;AAED,WAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAECN,QAFD,CAFJ,CAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCI;AA2CH;;AAvO8B;;AA0OnC,eAAe/C,KAAf","sourcesContent":["import React from 'react'\nimport { Button, Form, Grid, Header, Segment,Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport superagent from 'superagent';\nimport FetchApi from '../utility/fetchApi';\nimport Validator from \"validatorjs\";\n\n\nclass Login extends React.Component{\n\n    state ={\n        form:{\n            email:'',\n        password:'',\n        url:''},\n        errorMessage:{\n            email:'',\n            password:'',\n            url:''\n        }\n    }\n\n    validate = () => {\n        const rules = {\n          email: 'required|email',\n          password: 'required',\n          url: 'required'\n        };\n    \n        let validation = new Validator(this.state.form, rules);\n        let isError = validation.fails();\n        this.setState({ errorMessage: validation.errors.errors });\n        return isError;\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        if(!this.validate()) {\n            console.log(\"here\");\n            alert(\"hooo\");\n        }\n        else{\n            let a = window.btoa(`${this.state.email}:${this.state.password}`);\n        console.log(a);\n        localStorage.setItem('token',a);\n        superagent\n            .get(`${this.state.url}/rest/api/3/project`)\n            .set('Access-Control-Allow-Credentials', '*')\n            .set('Accept', 'application/json')\n            .set('Authorization', `Basic ${a}`)\n            .end((err, res) => {\n                if (err) { return alert(\"Invalid User\",err)}\n                localStorage.setItem('url',`${this.state.url}`);\n                console.log(\"response : \",res.body);\n                console.log(\"Table routing\");\n                alert(\"Successfully Logged...\");\n                this.props.history.push('/tableSheet');\n      \n            })  \n        }\n        }\n    \n    \n    \n    routeToTables = () => {\n        \n        // if(this.state.email==null || this.state.password==null || this.state.url== null){\n        //     alert(\"Fill the details...\");\n        // }\n        let a = window.btoa(`${this.state.email}:${this.state.password}`);\n        console.log(a);\n        localStorage.setItem('token',a);\n        superagent\n            .get(`${this.state.url}/rest/api/3/project`)\n            .set('Access-Control-Allow-Credentials', '*')\n            .set('Accept', 'application/json')\n            .set('Authorization', `Basic ${a}`)\n            .end((err, res) => {\n                if (err) { return alert(\"Invalid User\",err)}\n                localStorage.setItem('url',`${this.state.url}`);\n                console.log(\"response : \",res.body);\n                console.log(\"Table routing\");\n                alert(\"Successfully Logged...\");\n                this.props.history.push('/tableSheet');\n      \n            })        \n    }\n\n    getValidationMessages = () => {\n        let validationMessages = [];\n        if (this.state.errorMessage.email) {\n          validationMessages.push(<Message key=\"1\"\n            size='mini'\n            error\n            content={this.state.errorMessage.email} />)\n        }\n        if (this.state.errorMessage.password) {\n          validationMessages.push(<Message key=\"2\"\n            size='mini'\n            error\n            content={this.state.errorMessage.password} />)\n        }\n        if (this.state.errorMessage.url) {\n          validationMessages.push(<Message key=\"3\"\n            size='mini'\n            error\n            content={this.state.errorMessage.url} />)\n        }\n        return validationMessages;\n      }\n\n    changeEmail = (event) => {\n        this.setState({email : event.target.value})\n    }\n\n    changePassword = (event) => {\n        this.setState({password : event.target.value})\n    }\n\n    changeUrl = (event) => {\n        this.setState({url : event.target.value})\n    }\n\n    changeHandler = (e) => {\n        let form = { ...this.state.form }\n        //console.log(e.target.name);\n        form[e.target.name] = e.target.value;\n        //console.log(e.target.value);\n        this.setState({ form });\n        const rules = {\n            email: 'required|email',\n            password: 'required|min:6|max:15',\n            name: 'required'\n          };\n      \n          let validation = new Validator({ ...this.state.form, [e.target.name]: e.target.value }, rules);\n          let isError = validation.fails();\n          this.setState({ errorMessage: validation.errors.errors });\n          return isError;\n      }\n\n    render(){\n        let validationMessages = this.getValidationMessages();        \n        let formData = (<>\n\n            {validationMessages.length ? <Segment style={{ display: \"block\" }} stacked>\n        {[...validationMessages]}\n      </Segment> : null}\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n            <Header as='h1' color='teal' textAlign='center'>\n            Log-in to your account\n            </Header>\n                <Form size='large'>\n                    <Segment stacked>\n                <Form.Input \n                fluid icon='user' \n                iconPosition='left' \n                placeholder='E-mail address'\n                 onChange={this.changeHandler}/>\n        \n                <Form.Input\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='Token'\n                type='token'\n                onChange={this.changeHandler}\n                />\n\n                <Form.Input\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='URL'\n                type='url'\n                onChange={this.changeHandler}\n                />\n                <Button color='teal' fluid size='large' onClick={this.submitHandler}>\n                    Login\n                </Button>\n                </Segment>\n            </Form>\n  {/* <Message>\n     New to us? <a href='#'>Sign Up</a> \n  </Message> */}\n        </Grid.Column>\n        </Grid></>)\n        let errorMessage = null;\n\n        if (this.props.error) {\n        errorMessage = (\n            <p>{this.props.error.message}</p>\n        );\n        }\n       \n        return(\n\n            <div >\n           \n            {formData}\n        </div>\n    //         <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n    //         <Grid.Column style={{ maxWidth: 450 }}>\n    //             <Header as='h1' color='teal' textAlign='center'>\n    //             Log-in to your account\n    //             </Header>\n    //                 <Form size='large'>\n    //                     <Segment stacked>\n    //                 <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' onChange={this.changeEmail}/>\n            \n    //                 <Form.Input\n    //                 fluid\n    //                 icon='lock'\n    //                 iconPosition='left'\n    //                 placeholder='Token'\n    //                 type='token'\n    //                 onChange={this.changePassword}\n    //                 />\n\n    //                 <Form.Input\n    //                 fluid\n    //                 icon='lock'\n    //                 iconPosition='left'\n    //                 placeholder='URL'\n    //                 type='url'\n    //                 onChange={this.changeUrl}\n    //                 />\n    //                 <Button color='teal' fluid size='large' onClick={this.submitHandler}>\n    //                     Login\n    //                 </Button>\n    //                 </Segment>\n    //             </Form>\n    //   {/* <Message>\n    //      New to us? <a href='#'>Sign Up</a> \n    //   </Message> */}\n    //         </Grid.Column>\n    //         </Grid>\n        )\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}