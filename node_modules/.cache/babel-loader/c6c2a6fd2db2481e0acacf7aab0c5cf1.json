{"ast":null,"code":"\"use strict\";\n\nvar errorStrings = require('./../lib/error');\n\nmodule.exports = IssueLinkTypeClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/issueLinkType'\r\n * @param {JiraClient} jiraClient\r\n * @constructor IssueLinkTypeClient\r\n */\n\nfunction IssueLinkTypeClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Get a list of available issue link types, if issue linking is enabled. Each issue link type has an id, a name\r\n   * and a label for the outward and inward link relationship.\r\n   *\r\n   * @method getAvailableTypes\r\n   * @memberOf IssueLinkTypeClient#\r\n   * @param opts The request options for the API.  Ignored in this function.\r\n   * @param [callback] Called when the available IssueLink types are retrieved.\r\n   * @return {Promise} Resolved when the available IssueLink types are retrieved.\r\n   */\n\n  this.getAvailableTypes = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issueLinkType'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Create a new issue link type.\r\n   *\r\n   * @method createIssueLinkType\r\n   * @memberOf IssueLinkTypeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.linkType See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2018}\r\n   * @param [callback] Called when the IssueLink type has been created.\r\n   * @return {Promise} Resolved when the IssueLink type has been created.\r\n   */\n\n\n  this.createIssueLinkType = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/issueLinkType'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.linkType\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Gets for a given issue link type id all information about this issue link type.\r\n   *\r\n   * @method getIssueLinkType\r\n   * @memberOf IssueLinkTypeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.issueLinkTypeId The id of the IssueLink type to retrieve.\r\n   * @param [callback] Called when the IssueLink type has been retrieved\r\n   * @return {Promise} Resolved when the IssueLink type has been retrieved\r\n   */\n\n\n  this.getIssueLinkType = function (opts, callback) {\n    if (!opts.issueLinkTypeId) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete the specified issue link type.\r\n   *\r\n   * @method deleteIssueLinkType\r\n   * @memberOf IssueLinkTypeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.issueLinkTypeId The id of the IssueLink type to delete.\r\n   * @param [callback] Called when the IssueLink type has been delete\r\n   * @return {Promise} Resolved when the IssueLink type has been delete\r\n   */\n\n\n  this.deleteIssueLinkType = function (opts, callback) {\n    if (!opts.issueLinkTypeId) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'IssueLink type deleted.');\n  };\n  /**\r\n   * Update the specified issue link type.\r\n   *\r\n   * @method editIssueLinkType\r\n   * @memberOf IssueLinkTypeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.issueLinkTypeId The id of the IssueLink type to retrieve.\r\n   * @param opts.linkType See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2071}\r\n   * @param [callback] Called when the IssueLink type has been updated.\r\n   * @return {Promise} Resolved when the IssueLink type has been updated.\r\n   */\n\n\n  this.editIssueLinkType = function (opts, callback) {\n    if (!opts.issueLinkTypeId) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.issueLinkType\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}