{"ast":null,"code":"\"use strict\";\n\nvar errorStrings = require('./../lib/error');\n\nmodule.exports = CommentClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/comment'\r\n * @constructor CommentClient\r\n * @param {JiraClient} jiraClient\r\n */\n\nfunction CommentClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns the keys of all properties for the comment identified by the key or by the id.\r\n   *\r\n   * @method getCommentPropertyKeys\r\n   * @memberOf CommentClient#\r\n   * @param opts The options passed in the request to the API.\r\n   * @param opts.commentId The id of the comment from which keys will be returned.\r\n   * @param [callback] Called when the keys have been retrieved.\r\n   * @return {Promise} Resolved when the keys have been retrieved.\r\n   */\n\n  this.getCommentPropertyKeys = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets the value of the specified comment's property.\r\n   *\r\n   * You can use this resource to store a custom data against the comment identified by the key or by the id. The\r\n   * user who stores the data is required to have permissions to administer the comment.\r\n   *\r\n   * @method setCommentProperty\r\n   * @memberOf CommentClient#\r\n   * @param opts The options passed in the request to the API.\r\n   * @param opts.commentId The id of the comment from which keys will be returned.\r\n   * @param opts.propertyKey The key of the property to be edited.\r\n   * @param opts.propertyValue The new value of the property.\r\n   * @param [callback] Called when the property has been edited.\r\n   * @return {Promise} Resolved when the property has been edited.\r\n   */\n\n\n  this.setCommentProperty = function (opts, callback) {\n    if (!opts.propertyKey) {\n      throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);\n    } else if (!opts.propertyValue) {\n      throw new Error(errorStrings.NO_COMMENT_PROPERTY_VALUE_ERROR);\n    }\n\n    var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'PUT', opts.propertyValue);\n    return this.jiraClient.makeRequest(options, callback, 'Property Edited');\n  };\n  /**\r\n   * Returns the value of the property with a given key from the comment identified by the key or by the id. The user\r\n   * who retrieves the property is required to have permissions to read the comment.\r\n   *\r\n   * @method getCommentProperty\r\n   * @memberOf CommentClient#\r\n   * @param opts The options passed in the request to the API.\r\n   * @param opts.commentId The id of the comment from which keys will be returned.\r\n   * @param opts.propertyKey The key of the property to be edited.\r\n   * @param [callback] Called when the property has been retrieved.\r\n   * @return {Promise} Resolved when the property has been retrieved.\r\n   */\n\n\n  this.getCommentProperty = function (opts, callback) {\n    if (!opts.propertyKey) {\n      throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);\n    }\n\n    var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes the property from the comment identified by the key or by the id. Ths user removing the property is\r\n   * required to have permissions to administer the comment.\r\n   *\r\n   * @method deleteCommentProperty\r\n   * @memberOf CommentClient#\r\n   * @param opts The options passed in the request to the API.\r\n   * @param opts.commentId The id of the comment from which keys will be returned.\r\n   * @param opts.propertyKey The key of the property to be edited.\r\n   * @param [callback] Called when the property has been retrieved.\r\n   * @return {Promise} Resolved when the property has been retrieved.\r\n   */\n\n\n  this.deleteCommentProperty = function (opts, callback) {\n    if (!opts.propertyKey) {\n      throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);\n    }\n\n    var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Comment property deleted');\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf CommentClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {string} path The path of the endpoint following /issue/{idOrKey}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    if (!opts.commentId) {\n      throw new Error(errorStrings.NO_COMMENT_ID);\n    }\n\n    var basePath = '/comment/' + opts.commentId + \"/properties\";\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}