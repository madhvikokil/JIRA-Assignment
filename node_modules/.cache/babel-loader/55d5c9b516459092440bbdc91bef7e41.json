{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ScreensClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/screens'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor ScreensClient\r\n */\n\nfunction ScreensClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Gets available fields for screen. i.e ones that haven't already been added.\r\n   *\r\n   * @method getAvailableFields\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to Jira\r\n   * @param {number} opts.screenId The id of the screen to retrieve.\r\n   * @param [callback] Called when the available fields have been retrieved\r\n   * @return {Promise} Resolved when the available fields have been retrieved\r\n   */\n\n  this.getAvailableFields = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/availableFields', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of all tabs for the given screen.\r\n   *\r\n   * @method getTabs\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to Jira\r\n   * @param {number} opts.screenId The id of the screen to retrieve.\r\n   * @param [callback] Called when the tabs have been retrieved.\r\n   * @return {Promise} Resolved when the tabs have been retrieved.\r\n   */\n\n\n  this.getTabs = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates tab for given screen\r\n   *\r\n   * @method createTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to Jira\r\n   * @param {number} opts.screenId The id of the screen in which to create a tab.\r\n   * @param {string} opts.name The name of the tab to add.  Minimum required to create a tab.\r\n   * @param [callback] Called when the tab has been created.\r\n   * @return {Promise} Resolved when the tab has been created.\r\n   */\n\n\n  this.createTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs', 'POST', {\n      name: opts.name\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Renames the given tab on the given screen.\r\n   *\r\n   * @method renameTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab to rename.\r\n   * @param {number} opts.tabId The id of the tab to rename\r\n   * @param {string} opts.name The new name of the tab.\r\n   * @param [callback] Called when data has been retrieved\r\n   * @return {Promise} Resolved when data has been retrieved\r\n   */\n\n\n  this.renameTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId, 'PUT', {\n      name: opts.name\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes the given tab from the given screen.\r\n   *\r\n   * @method deleteTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab to delete.\r\n   * @param {number} opts.tabId The id of the tab to delete\r\n   * @param [callback] Called when data has been retrieved\r\n   * @return {Promise} Resolved when data has been retrieved\r\n   */\n\n\n  this.deleteTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId, 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Tab Deleted');\n  };\n  /**\r\n   * Adds field to the given tab\r\n   *\r\n   * @method addFieldToTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab.\r\n   * @param {number} opts.tabId the id of the tab to which the fields will be added.\r\n   * @param {string} opts.fieldId The field to add\r\n   * @param [callback] Called when the fields have been added to the tab.\r\n   * @return {Promise} Resolved when the fields have been added to the tab.\r\n   */\n\n\n  this.addFieldToTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields', 'POST', opts.fieldId);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Gets all fields for a given tab.\r\n   *\r\n   * @method getFieldsInTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab.\r\n   * @param {number} opts.tabId the id of the tab for which to retrieve fields.\r\n   * @param [callback] Called when the fields have been retrieved.\r\n   * @return {Promise} Resolved when the fields have been retrieved.\r\n   */\n\n\n  this.getFieldsInTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the given field from the given tab.\r\n   *\r\n   * @method removeFieldFromTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab.\r\n   * @param {number} opts.tabId the id of the tab from which to remove the field.\r\n   * @param {string} opts.fieldId The id of the field to remove from the tab.\r\n   * @param [callback] Called when the field has been removed.\r\n   * @return {Promise} Resolved when the field has been removed.\r\n   */\n\n\n  this.removeFieldFromTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields/' + opts.fieldId, 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Field Removed From Tab');\n  };\n  /**\r\n   * Move the given field on the given tab\r\n   *\r\n   * @method moveFieldOnTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.screenId The id of the screen containing the tab.\r\n   * @param {number} opts.tabId the id of the tab containing the field.\r\n   * @param {string} opts.fieldId The id of the field to remove from the tab.\r\n   * @param {number} opts.newPosition The position to which the field should be moved.  May be one of:\r\n   *  * Earlier\r\n   *  * Later\r\n   *  * First\r\n   *  * Last\r\n   * @param [callback] Called when the field has been removed.\r\n   * @return {Promise} Resolved when the field has been removed.\r\n   */\n\n\n  this.moveFieldOnTab = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields/' + opts.fieldId + '/move', 'POST', {\n      position: opts.newPosition\n    });\n    return this.jiraClient.makeRequest(options, callback, 'Field Moved');\n  };\n  /**\r\n   * Moves tab position\r\n   *\r\n   * @method moveTabPosition\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {number} opts.screenId The id of the screen containing the tab.\r\n   * @param {number} opts.tabId the id of the tab to move.\r\n   * @param {number} opts.newPosition The new (zero-indexed) position of the tab.\r\n   * @param [callback] Called when the tab has been moved.\r\n   * @return {Promise} Resolved when the tab has been moved.\r\n   */\n\n\n  this.moveTabPosition = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/move/' + opts.newPosition, 'POST');\n    return this.jiraClient.makeRequest(options, callback, 'Tab Moved');\n  };\n  /**\r\n   * Adds field or custom field to the default tab\r\n   *\r\n   * @method addFieldToDefaultTab\r\n   * @memberOf ScreensClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.fieldId The id of the field to add to the default tab.\r\n   * @param [callback] Called when the tab has been moved.\r\n   * @return {Promise} Resolved when the tab has been moved.\r\n   */\n\n\n  this.addFieldToDefaultTab = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/screens/addToDefault/' + opts.fieldId),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {number} opts.screenId The id of the screen to use in the path.\r\n   * @param {Array} [opts.fields] The fields to include\r\n   * @param {Array} [opts.expand] The fields to expand\r\n   * @param {string} path The path of the endpoint following /screen/{id}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    var basePath = '/screens/' + opts.screenId;\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n      qs.fields = qs.fields.slice(0, -1);\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n      qs.expand = qs.expand.slice(0, -1);\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}