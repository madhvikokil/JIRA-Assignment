{"ast":null,"code":"var _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/component/chart.js\";\nimport React, { PureComponent } from 'react';\nimport { PieChart, Pie, Cell } from 'recharts'; //import Axios from '../../axios-orders';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nconst RADIAN = Math.PI / 180;\nexport default class Chart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allUser: [],\n      allPost: [],\n      data: []\n    };\n\n    this.renderCustomizedLabel = ({\n      cx,\n      cy,\n      midAngle,\n      innerRadius,\n      outerRadius,\n      percent,\n      index\n    }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n      const x = cx + radius * Math.cos(-midAngle * RADIAN);\n      const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      return React.createElement(\"text\", {\n        x: x,\n        y: y,\n        fill: \"white\",\n        textAnchor: x > cx ? 'start' : 'end',\n        dominantBaseline: \"central\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"\".concat((percent * 100).toFixed(0), \"%\"));\n    };\n  }\n\n  //   chartForAuthor = async () => {\n  // \t\tlet users=[];\n  // \t\tlet posts=[];\n  // \t\tlet newData=[];\n  // \t\ttry {\n  //             users = await Axios.get('/userData.json')\n  //             posts = await Axios.get('/newPosts.json')\n  //             .then(res=>{\n  //                 console.log(res);\n  //                 for ( let key in res.data ) {\n  //                     // console.log(\"user\",users.data);\n  //                     // console.log(\"Posts:\",posts);\n  //                     posts.push({\n  //                         ...res.data[key],\n  //                         id: key\n  //                     } );\n  //                     console.log(\"id:\",key);\n  //                 }\n  //                  console.log(\"users:\",users);\n  //                 // console.log(\"posts:\",posts);\n  // \t\t\t\tObject.keys(users.data).forEach(key => {\n  //                     console.log(users.data);\n  // \t\t\t\t\tconst array = posts.filter(post => post.userId == key);\n  // \t\t\t\t\tif (array.length) {\n  // \t\t\t\t\tnewData.push({name: users.data[key].name, value: array.length });\n  // \t\t\t\t\t}\n  // \t\t\t\t  })\n  //                   this.setState({data:newData});\n  //                   console.log(\"data\",this.state.data);\n  // \t\t\t}\n  // \t)\n  // \t\t} catch (error) {\n  // \t\t\tconsole.log(error);\n  // \t\t}\n  // \t}\n  componentDidMount() {\n    let sum = localStorage.getItem('sum');\n    console.log(\"sum : \", sum);\n    console.log(this.props.count); //this.chartForAuthor();\n  }\n\n  render() {\n    return React.createElement(PieChart, {\n      width: 400,\n      height: 400,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Pie, {\n      data: this.state.data,\n      cx: 300,\n      cy: 200,\n      labelLine: false,\n      label: this.renderCustomizedLabel,\n      outerRadius: 80,\n      fill: \"#8884d8\",\n      dataKey: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.data.map((entry, index) => React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: COLORS[index % COLORS.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/component/chart.js"],"names":["React","PureComponent","PieChart","Pie","Cell","COLORS","RADIAN","Math","PI","Chart","state","allUser","allPost","data","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin","toFixed","componentDidMount","sum","localStorage","getItem","console","log","props","count","render","map","entry","length"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {PieChart,Pie,Cell} from 'recharts'\n//import Axios from '../../axios-orders';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nconst RADIAN = Math.PI / 180;\n\nexport default class Chart extends PureComponent {\n\n\tstate={\n\t\tallUser:[],\n\t\tallPost:[],\n\t\tdata:[]\n\t}\n\n\n\n//   chartForAuthor = async () => {\n// \t\tlet users=[];\n// \t\tlet posts=[];\n// \t\tlet newData=[];\n// \t\ttry {\n         \n//             users = await Axios.get('/userData.json')\n//             posts = await Axios.get('/newPosts.json')\n//             .then(res=>{\n//                 console.log(res);\n//                 for ( let key in res.data ) {\n//                     // console.log(\"user\",users.data);\n//                     // console.log(\"Posts:\",posts);\n//                     posts.push({\n//                         ...res.data[key],\n//                         id: key\n//                     } );\n//                     console.log(\"id:\",key);\n//                 }\n//                  console.log(\"users:\",users);\n//                 // console.log(\"posts:\",posts);\n// \t\t\t\tObject.keys(users.data).forEach(key => {\n//                     console.log(users.data);\n// \t\t\t\t\tconst array = posts.filter(post => post.userId == key);\n// \t\t\t\t\tif (array.length) {\n// \t\t\t\t\tnewData.push({name: users.data[key].name, value: array.length });\n// \t\t\t\t\t}\n// \t\t\t\t  })\n\n//                   this.setState({data:newData});\n//                   console.log(\"data\",this.state.data);\n\t\t\t\t\n// \t\t\t}\n// \t)\n\t\n\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n\n\n// \t}\n\t\n\tcomponentDidMount(){\n            let sum = localStorage.getItem('sum');\n            console.log(\"sum : \",sum);\n            console.log(this.props.count);\n\t\t//this.chartForAuthor();\n\t\n    }\n    \n    renderCustomizedLabel = ({\n\t\tcx, cy, midAngle, innerRadius, outerRadius, percent, index,\n\t}) => {\n\t\tconst radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n\t\tconst x = cx + radius * Math.cos(-midAngle * RADIAN);\n\t\tconst y = cy + radius * Math.sin(-midAngle * RADIAN);\n\t\n\t\treturn (\n\t\t\t<text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n\t\t\t\t{`${(percent * 100).toFixed(0)}%`}\n\t\t\t</text>\n\t\t);\n\t};\n\t\n\trender() {\n \n\t\treturn (\n\t\t\t<PieChart width={400} height={400}>\n\t\t\t\t<Pie\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tcx={300}\n\t\t\t\t\tcy={200}\n\t\t\t\t\tlabelLine={false}\n\t\t\t\t\tlabel={this.renderCustomizedLabel}\n\t\t\t\t\touterRadius={80}\n\t\t\t\t\tfill=\"#8884d8\"\n\t\t\t\t\tdataKey=\"value\"\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n\t\t\t\t\t}\n\t\t\t\t</Pie>\n\t\t\t</PieChart>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}