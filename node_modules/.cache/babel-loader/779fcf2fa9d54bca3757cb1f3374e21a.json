{"ast":null,"code":"\"use strict\";\n\nmodule.exports = AgileEpicClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/agile/1.0/epic'\r\n * @param {JiraClient} jiraClient\r\n * @constructor AgileEpicClient\r\n */\n\nfunction AgileEpicClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns all issues that do not belong to any epic. This only includes issues that\r\n   * the user has permission to view. Issues returned from this resource include Agile fields,\r\n   * like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.  \r\n   * \r\n   * @method getIssuesWithoutEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param { Object } [opts] The request options to send to the Jira API\r\n   * @param { number } [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param { number } [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param { string } [opts.jql]\r\n   * @param { boolean } [opts.validateQuery]\r\n   * @param { Array<string> } [opts.fields]\r\n   * @param { string } [opts.expand]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n  this.getIssuesWithoutEpic = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/none/issue');\n    opts = opts || {};\n    var options = {\n      uri: endpoint,\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes issues from epics.\r\n   * The user needs to have the edit issue permission for all issue they want to remove from epics.\r\n   * The maximum number of issues that can be moved in one operation is 50.\r\n   * \r\n   * @method removeIssuesFromEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { string[] } [opts.issues]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.removeIssuesFromEpic = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/none/issue');\n    opts = opts || {};\n    var options = {\n      uri: endpoint,\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        issues: opts.issues\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it.\r\n   * \r\n   * @method getEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { number | string } opts.epicId\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.getEpic = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/' + opts.epicId);\n    var options = {\n      uri: endpoint,\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Performs a partial update of the epic. A partial update means that fields not present\r\n   * in the request JSON will not be updated. Valid values for color are color_1 to color_9.\r\n   * \r\n   * @method partiallyUpdateEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { number | string } opts.epicId\r\n   * @param { string } [opts.name]\r\n   * @param { string } [opts.summary]\r\n   * @param { any } [opts.color]\r\n   * @param { boolean } [opts.done]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.partiallyUpdateEpic = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/' + opts.epicId);\n    var options = {\n      uri: endpoint,\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        name: opts.name,\n        summary: opts.summary,\n        color: opts.color,\n        done: opts.done\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a list of all issues associated with an agile epic   \r\n   * \r\n   * @method getIssuesForEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { string | number } opts.epicId epic id or epic key\r\n   * @param { number } [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param { number } [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param { string } [opts.jql]\r\n   * @param { boolean } [opts.validateQuery]\r\n   * @param { Array<string> } [opts.fields]\r\n   * @param { string } [opts.expand]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.getIssuesForEpic = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/epic/' + opts.epicId + '/issue'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time.\r\n   * That means that already assigned issues to an epic, will not be assigned to the previous epic anymore.\r\n   * The user needs to have the edit issue permission for all issue they want to move and to the epic.\r\n   * The maximum number of issues that can be moved in one operation is 50.\r\n   * \r\n   * @method moveIssuesToEpic\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { number | string } opts.epicId\r\n   * @param { string[] } [opts.issues]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.moveIssuesToEpic = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/' + opts.epicId + '/issue');\n    var options = {\n      uri: endpoint,\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        issues: opts.issues\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Moves (ranks) an epic before or after a given epic.\r\n   * \r\n   * If rankCustomFieldId is not defined, the default rank field will be used.\r\n   * \r\n   * @method rankEpics\r\n   * @memberOf AgileEpicClient\r\n   * @param opts The request options to send to the Jira API\r\n   * @param { number | string } opts.epicId\r\n   * @param { string } [opts.rankBeforeEpic]\r\n   * @param { string } [opts.rankAfterEpic]\r\n   * @param { number } [opts.rankCustomFieldId]\r\n   * @param { Function } [callback] Called when the dashboards have been retrieved.\r\n   * @return { Promise } Resolved when the dashboards have been retrieved.\r\n   */\n\n\n  this.rankEpics = function (opts, callback) {\n    var endpoint = this.jiraClient.buildAgileURL('/epic/' + opts.epicId + '/rank');\n    var options = {\n      uri: endpoint,\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        rankBeforeEpic: opts.rankBeforeEpic,\n        rankAfterEpic: opts.rankAfterEpic,\n        rankCustomFieldId: opts.rankCustomFieldId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}