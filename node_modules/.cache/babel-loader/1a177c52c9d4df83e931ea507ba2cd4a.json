{"ast":null,"code":"\"use strict\";\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar errorStrings = require('./../lib/error');\n\nmodule.exports = AvatarClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/avatar'\r\n * @param {JiraClient} jiraClient\r\n * @constructor AvatarClient\r\n */\n\nfunction AvatarClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns all system avatars of the given type.\r\n   *\r\n   * @method getAvatars\r\n   * @memberOf AvatarClient#\r\n   * @param opts The options to be used in the API request.\r\n   * @param opts.avatarType The avatar type.  May be 'project' or 'user'.\r\n   * @param [callback] Called when the avatars are retrieved.\r\n   * @return {Promise} Resolved when the avatars are retrieved.\r\n   */\n\n  this.getAvatars = function (opts, callback) {\n    if (!opts.avatarType) {\n      throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);\n    }\n\n    var options = {\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/system')\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates a temporary avatar.  This function doesn't seem to work the way the Jira API describes, so for now\r\n   * just don't use it.\r\n   *\r\n   * @method createTemporaryAvatar\r\n   * @memberOf AvatarClient#\r\n   * @param opts The options to be used in the API request.\r\n   * @param opts.avatarType The avatar type.  May be 'project' or 'user'.\r\n   * @param opts.avatarFilename The name of the file being uploaded\r\n   * @param opts.avatarFileSize The size of the file\r\n   * @param opts.avatarFilePath The path to the avatar file.\r\n   * @param [callback] Called when the avatar is created.\r\n   * @return {Promise} Resolved when the avatar is created.\r\n   */\n\n\n  this.createTemporaryAvatar = function (opts, callback) {\n    if (!opts.avatarType) {\n      throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);\n    }\n\n    var size = fs.statSync(opts.avatarFilePath).size;\n    var name = path.basename(opts.avatarFilePath);\n    var options = {\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/temporary'),\n      headers: {\n        \"X-Atlassian-Token\": \"no-check\"\n      },\n      qs: {\n        filename: name,\n        size: size\n      },\n      formData: {\n        file: fs.createReadStream(opts.avatarFilePath)\n      }\n    };\n    delete options.body;\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Updates the cropping instructions of the temporary avatar.  This function doesn't seem to work the way the Jira\r\n   * API describes, so for now just don't use it.\r\n   *\r\n   * @method cropTemporaryAvatar\r\n   * @memberOf AvatarClient#\r\n   * @param {Object} opts The options to be used in the API request.\r\n   * @param {string} opts.avatarType The avatar type.  May be 'project' or 'user'.\r\n   * @param {Object} opts.crop See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3316}\r\n   * @param [callback] Called when the avatar has been cropped.\r\n   * @return {Promise} Resolved when the avatar has been cropped.\r\n   */\n\n\n  this.cropTemporaryAvatar = function (opts, callback) {\n    if (!opts.avatarType) {\n      throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);\n    }\n\n    var options = {\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/temporaryCrop'),\n      headers: {\n        \"X-Atlassian-Token\": \"no-check\"\n      },\n      body: opts.crop\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}