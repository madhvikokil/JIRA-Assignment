{"ast":null,"code":"\"use strict\";\n\nmodule.exports = WebhookClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/webhook/1.0/webhook'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor WebhookClient\r\n */\n\nfunction WebhookClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns a list of all registered webhooks.\r\n   *\r\n   * @method getAllWebhooks\r\n   * @memberOf WebhookClient#\r\n   * @param opts Ignored\r\n   * @param [callback] Called when the webhooks have been retrieved.\r\n   * @return {Promise} Resolved when the webhooks have been retrieved.\r\n   */\n\n  this.getAllWebhooks = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildWebhookURL('/webhook'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a webhook with a specific ID.\r\n   *\r\n   * @method getWebhook\r\n   * @memberOf WebhookClient#\r\n   * @param opts The options sent to the JIRA API.\r\n   * @param opts.webhookId The numerical webhook ID.\r\n   * @param [callback] Called when the webhook has been retrieved.\r\n   * @return {Promise} Resolved when the webhook has been retrieved.\r\n   */\n\n\n  this.getWebhook = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildWebhookURL('/webhook/' + opts.webhookId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Registers a new webhook.\r\n   *\r\n   * @method createWebhook\r\n   * @memberOf WebhookClient#\r\n   * @param opts The options sent to the JIRA API.\r\n   * @param opts.name The name of the webhook.\r\n   * @param opts.url The URL of the webhook.\r\n   * @param opts.events An array of events with which the webhook should be registered. See\r\n   *   {@link https://developer.atlassian.com/jiradev/jira-apis/webhooks#Webhooks-configureConfiguringawebhook}.\r\n   * @param opts.enabled Whether the webhook is enabled.\r\n   * @param opts.filter An object containing filter configuration.\r\n   * @param opts.filter.issue-related-events-section A filter for issues, written in JQL.\r\n   * @param opts.excludeBody Whether to send an empty body to the webhook URL.\r\n   * @param [callback] Called when the webhook has been retrieved.\r\n   * @return {Promise} Resolved when the webhook has been retrieved.\r\n   */\n\n\n  this.createWebhook = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildWebhookURL('/webhook'),\n      method: 'POST',\n      json: true,\n      body: opts,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes a registered webhook.\r\n   *\r\n   * @method deleteWebhook\r\n   * @memberOf WebhookClient#\r\n   * @param opts The options sent to the JIRA API.\r\n   * @param opts.webhookId The numerical webhook ID.\r\n   * @param [callback] Called when the webhook has been retrieved.\r\n   * @return {Promise} Resolved when the webhook has been retrieved.\r\n   */\n\n\n  this.deleteWebhook = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildWebhookURL('/webhook/' + opts.webhookId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}