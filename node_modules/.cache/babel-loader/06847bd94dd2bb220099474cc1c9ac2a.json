{"ast":null,"code":"\"use strict\";\n\nmodule.exports = AgileSprintClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/agile/1.0/sprint'\r\n * @param {JiraClient} jiraClient\r\n * @constructor AgileSprintClient\r\n */\n\nfunction AgileSprintClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Creates a sprint from a JSON representation.\r\n   *\r\n   * @method createSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} sprint The sprint data in the form of POST body to the\r\n   *   Jira API.\r\n   * @param {callback} [callback] Called when the sprint has been created.\r\n   * @return {Promise} Resolved when the sprint has been created.\r\n   */\n\n  this.createSprint = function (sprint, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint'),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: sprint\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a single sprint.\r\n   *\r\n   * @method getSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.sprintId The sprint id.\r\n   * @param {string} [opts.filter]\r\n   * @param {string} [opts.startAt]\r\n   * @param {string} [opts.maxResults]\r\n   * @param {callback} [callback] Called when the sprint has been retrieved.\r\n   * @return {Promise} Resolved when the sprint has been retrieved.\r\n   */\n\n\n  this.getSprint = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        filter: opts.filter,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Perform a full update of a sprint.\r\n   *\r\n   * @method updateSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} sprint The sprint data in the form of PUT body to the\r\n   *   Jira API.\r\n   * @param {string} sprint.sprintId The id of the sprint.  EX: 331\r\n   * @param {callback} [callback] Called when the sprint has been updated.\r\n   * @return {Promise} Resolved when the sprint has been updated.\r\n   */\n\n\n  this.updateSprint = function (sprint, callback) {\n    var sprintId = sprint.sprintId;\n    delete sprint.sprintId;\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId),\n      method: 'PUT',\n      followAllRedirects: true,\n      json: true,\n      body: sprint\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Perform a partial update of a sprint.\r\n   *\r\n   * @method partiallyUpdateSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} sprint The sprint data in the form of POST body to the\r\n   *   Jira API.\r\n   * @param {string} [sprint.sprintId] The id of the sprint.  EX: 331.\r\n   * @param {callback} [callback] Called when the sprint has been updated.\r\n   * @return {Promise} Resolved when the sprint has been updated.\r\n   */\n\n\n  this.partiallyUpdateSprint = function (sprint, callback) {\n    var sprintId = sprint.sprintId;\n    delete sprint.sprintId;\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: sprint\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete an existing sprint.\r\n   *\r\n   * @method deleteSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.sprintId The id of the sprint.  EX: 331\r\n   * @param {string} [opts.filter]\r\n   * @param {string} [opts.startAt]\r\n   * @param {string} [opts.maxResults]\r\n   * @param {callback} [callback] Called when the sprint is deleted.\r\n   * @return {Promise} Resolved when the sprint is deleted.\r\n   */\n\n\n  this.deleteSprint = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        filter: opts.filter,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Return all issues in a sprint, for a given sprint id.\r\n   *\r\n   * @method getSprintIssues\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.sprintId The sprint id.\r\n   * @param {string} [opts.startAt]\r\n   * @param {string} [opts.maxResults]\r\n   * @param {string} [opts.jql] Filters results using a JQL query.\r\n   * @param {boolean} [opts.validateQuery] Specifies whether to valide the JQL query.\r\n   * @param {string} [opts.fields] The list of fields to return for each issue.\r\n   * @param {string} [opts.expand] A comma-separated list of the parameters to expand.\r\n   * @param {callback} [callback] Called when the issues are returned.\r\n   * @return {Promise} Resolved when the issues are returned.\r\n   */\n\n\n  this.getSprintIssues = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId + '/issue'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Move issues to a sprint, for a given sprint id.\r\n   *\r\n   * @method moveSprintIssues\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} opts The issue data in the form of POST body to the\r\n   *   Jira API.\r\n   * @param {string} opts.sprintId The sprint id.\r\n   * @param {string[]} opts.issues Ids of the issues to move.\r\n   * @param {string} [opts.rankBeforeIssue]\r\n   * @param {string} [opts.rankAfterIssue]\r\n   * @param {string} [opts.rankCustomField]\r\n   * @param {callback} [callback] Called when the sprint has been retrieved.\r\n   * @return {Promise} Resolved when the sprint has been retrieved.\r\n   */\n\n\n  this.moveSprintIssues = function (opts, callback) {\n    var sprintId = opts.sprintId;\n    delete opts.sprintId;\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId + '/issue'),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: opts\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Swap the position of the sprint (given by sprint id) with the second\r\n   * sprint.\r\n   *\r\n   * @method swapSprint\r\n   * @memberOf AgileSprintClient#\r\n   * @param {Object} opts The data in the form of POST body to the Jira API.\r\n   * @param {string} opts.sprintId The id of the sprint.  EX: 311\r\n   * @param {string} opts.sprintToSwapWith The id of the sprint.  EX: 311\r\n   * @param {callback} [callback] Called when the sprint has been retrieved.\r\n   * @return {Promise} Resolved when the sprint has been retrieved.\r\n   */\n\n\n  this.swapSprint = function (opts, callback) {\n    var sprintId = opts.sprintId;\n    delete opts.sprintId;\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId + '/swap'),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: opts\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}