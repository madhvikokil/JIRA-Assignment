{"ast":null,"code":"\"use strict\";\n\nmodule.exports = FilterClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/filter'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor FilterClient\r\n */\n\nfunction FilterClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Creates a new filter, and returns newly created filter. Currently sets permissions just using the users default\r\n   * sharing permissions\r\n   *\r\n   * @method createFilter\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {Array} [opts.expand] The parameters to expand.\r\n   * @param {Object} opts.filter The filter to create.  See\r\n   *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3347}\r\n   * @param [callback] Called when the filter has been created.\r\n   * @return {Promise} Resolved when the filter has been created.\r\n   */\n\n  this.createFilter = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/filter'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      qs: {},\n      body: opts.filter\n    };\n\n    if (opts.expand) {\n      options.qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        options.qs.expand += ex + ',';\n      });\n    }\n\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a filter given an id\r\n   *\r\n   * @method getFilter\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter to retrieve\r\n   * @param [callback] Called when the filter has been retrieved.\r\n   * @return {Promise} Resolved when the filter has been retrieved.\r\n   */\n\n\n  this.getFilter = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns all filters for the current user(only for cloud)\r\n   *\r\n   * @method getFilters\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param [callback] Called when the filter has been retrieved.\r\n   * @return {Promise} Resolved when the filter has been retrieved.\r\n   */\n\n\n  this.getFilters = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/filter'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Updates an existing filter, and returns its new value.\r\n   *\r\n   * @method updateFilter\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter to update\r\n   * @param {Object} opts.filter The new data for the filter.  See\r\n   *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3401}\r\n   * @param [callback] Called when the filter has been updated.\r\n   * @return {Promise} Resolved when the filter has been updated.\r\n   */\n\n\n  this.updateFilter = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'PUT', opts.filter);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete a filter.\r\n   *\r\n   * @method deleteFilter\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter to delete\r\n   * @param [callback] Called when the filter has been deleted.\r\n   * @return {Promise} Resolved when the filter has been deleted.\r\n   */\n\n\n  this.deleteFilter = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Filter Deleted');\n  };\n  /**\r\n   * Returns the default columns for the given filter. Currently logged in user will be used as the user making such\r\n   * request.\r\n   *\r\n   * @method getFilterColumns\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter for which to retrieve columns.\r\n   * @param [callback] Called when the columns have been retrieved.\r\n   * @return {Promise} Resolved when the columns have been retrieved.\r\n   */\n\n\n  this.getFilterColumns = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/columns', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets the default columns for the given filter\r\n   *\r\n   * @method setFilterColumns\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter for which to update columns.\r\n   * @param {Array} opts.columns The names of the new columns.\r\n   *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3460}\r\n   * @param [callback] Called when the columns have been set\r\n   * @return {Promise} Resolved when the columns have been set\r\n   */\n\n\n  this.setFilterColumns = function (opts, callback) {\n    var body = {\n      columns: opts.columns\n    };\n    var options = this.buildRequestOptions(opts, '/columns', 'PUT', body);\n    return this.jiraClient.makeRequest(options, callback, 'Columns Updated');\n  };\n  /**\r\n   * Resets the columns for the given filter such that the filter no longer has its own column config.\r\n   *\r\n   * @method resetFilterColumns\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.filterId The id of the filter for which to reset columns.\r\n   * @param [callback] Called when the columns have been reset.\r\n   * @return {Promise} Resolved when the columns have been reset.\r\n   */\n\n\n  this.resetFilterColumns = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/columns', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Columns Reset');\n  };\n  /**\r\n  * Adds a share permission for the given filter\r\n  *\r\n  * @method addSharePermission\r\n  * @memberOf FilterClient#\r\n  * @param {Object} opts The request options sent to the Jira API\r\n  * @param {number} opts.filterId The id of the filter for which to reset columns.\r\n  * @param {Object} opts.permission The share permission to apply\r\n  * @param [callback] Called when the columns have been reset.\r\n  * @return {Promise} Resolved when the columns have been reset.\r\n  */\n\n\n  this.addSharePermission = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/permission', 'POST', opts.permission);\n    return this.jiraClient.makeRequest(options, callback, 'Share Permission Added');\n  };\n  /**\r\n   * Returns the default share scope of the logged-in user.\r\n   *\r\n   * @method getDefaultShareScore\r\n   * @memberOf FilterClient#\r\n   * @param opts Ignored.\r\n   * @param [callback] Called when the default share scope has been retrieved.\r\n   * @return {Promise} Resolved when the default share scope has been retrieved.\r\n   */\n\n\n  this.getDefaultShareScore = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/filter/defaultShareScope'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets the default share scope of the logged-in user.\r\n   *\r\n   * @method setDefaultShareScope\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The request options sent to jira\r\n   * @param {string} opts.scope The new default share scope. Available values are GLOBAL and PRIVATE.\r\n   * @param [callback] Called when the default share scope has been set.\r\n   * @return {Promise} Resolved when the default share scope has been set.\r\n   */\n\n\n  this.setDefaultShareScope = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/filter/defaultShareScope'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        scope: opts.scope\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the favourite filters of the logged-in user.\r\n   *\r\n   * @method getFavouriteFilters\r\n   * @memberOf FilterClient#\r\n   * @param opts Ignored.\r\n   * @param [callback] Called when the list of favourites has been retrieved.\r\n   * @return {Promise} Resolved when the list of favourites has been retrieved.\r\n   */\n\n\n  this.getFavoriteFilters = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/filter/favourite'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {number} opts.filterId The id of the filter to use in the path.\r\n   * @param {Array} [opts.fields] The fields to include\r\n   * @param {Array} [opts.expand] The fields to expand\r\n   * @param {string} path The path of the endpoint following /filter/{id}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    var basePath = '/filter/' + opts.filterId;\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n      qs.fields = qs.fields.slice(0, -1);\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n      qs.expand = qs.expand.slice(0, -1);\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}