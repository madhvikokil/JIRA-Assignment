{"ast":null,"code":"\"use strict\";\n\nmodule.exports = GroupClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/group'\r\n *\r\n * These are considered experimental according to the Jira Docs, use at your own risk.\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor GroupClient\r\n */\n\nfunction GroupClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Creates a group by given group parameter Returns REST representation for the requested group.\r\n   *\r\n   * @method createGroup\r\n   * @memberOf GroupClient#\r\n   * @param opts The request options sent to jira\r\n   * @param opts.group The group to create.  See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2011}\r\n   * @param [callback] Called when the group is created\r\n   * @return {Promise} Resolved when the group is created\r\n   */\n\n  this.createGroup = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/group'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.group\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns REST representation for the requested group. Allows to get list of active users belonging to the\r\n   * specified group and its subgroups if \"users\" expand option is provided. You can page through users list by using\r\n   * indexes in expand param. For example to get users from index 10 to index 15 use \"users[10:15]\" expand value.\r\n   * This will return 6 users (if there are at least 16 users in this group). Indexes are 0-based and inclusive.\r\n   * DEPRECATED. This resource is deprecated, please use group/member API instead. (15-Feb-2018)\r\n   *\r\n   * @method getGroup\r\n   * @memberOf GroupClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.groupName A name of requested group.\r\n   * @param opts.expand Array of fields to expand. Currently only available expand is \"users\".\r\n   * @param [callback] Called when the group is retrieved.\r\n   * @return {Promise} Resolved when the group is retrieved.\r\n   */\n\n\n  this.getGroup = function (opts, callback) {\n    var qs = {\n      groupname: opts.groupName\n    };\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/group'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: qs\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * This resource returns a paginated list of users who are members of the specified group and its subgroups.\r\n   * Users in the page are ordered by user names.\r\n   * User of this resource is required to have sysadmin or admin permissions.\r\n   *\r\n   * @method getMembers\r\n   * @memberOf GroupClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {String} opts.groupName A name of requested group.\r\n   * @param {Boolean} opts.includeInactiveUsers inactive users will be included in the response if set to true. Default false.\r\n   * @param {Number} opts.startAt the index of the first user in group to return (0 based).\r\n   * @param {Number} opts.maxResults the maximum number of users to return (max 50).\r\n   * @param [callback] Called when the group is retrieved.\r\n   * @return {Promise} Resolved when the group is retrieved.\r\n   */\n\n\n  this.getMembers = function (opts, callback) {\n    var qs = {\n      groupname: opts.groupName,\n      includeInactiveUsers: opts.includeInactiveUsers,\n      startAt: opts.startAt,\n      maxResults: opts.maxResults\n    };\n    var options = {\n      uri: this.jiraClient.buildURL('/group/member'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: qs\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Adds given user to a group. Returns the current state of the group.\r\n   *\r\n   * @method addUserToGroup\r\n   * @memberOf GroupClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.groupName A name of requested group.\r\n   * @param {string} opts.userName The name of the user to add to the group.\r\n   * @param [callback] Called when the user has been added to the group.\r\n   * @return {Promise} Resolved when the user has been added to the group.\r\n   */\n\n\n  this.addUserToGroup = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/group/user'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        groupname: opts.groupName\n      },\n      body: {\n        name: opts.userName\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes given user from a group. Returns no content\r\n   *\r\n   * @method removeUserFromGroup\r\n   * @memberOf GroupClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.groupName A name of requested group.\r\n   * @param {string} opts.userName The name of the user to add to the group.\r\n   * @param [callback] Called when the user has been added to the group.\r\n   * @return {Promise} Resolved when the user has been added to the group.\r\n   */\n\n\n  this.removeUserFromGroup = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/group/user'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        groupname: opts.groupName,\n        username: opts.userName\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'User Removed from Group');\n  };\n  /**\r\n   * Deletes a group by given group parameter. Returns no content\r\n   *\r\n   * @method deleteGroup\r\n   * @memberOf GroupClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.groupName A group to delete.\r\n   * @param {string} [opts.swapGroup] A group to transfer visibility restrictions of the group that is being deleted\r\n   * @param [callback] Called when the group has been deleted.\r\n   * @return {Promise} Resolved when the group has been deleted.\r\n   */\n\n\n  this.deleteGroup = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/group'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        groupname: opts.groupName,\n        swapGroup: opts.swapGroup\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Group Deleted');\n  };\n}","map":null,"metadata":{},"sourceType":"script"}