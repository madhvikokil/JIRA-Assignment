{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ProjectClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/project'\r\n * @param {JiraClient} jiraClient\r\n * @constructor ProjectClient\r\n */\n\nfunction ProjectClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the\r\n   * list of projects that are visible when using anonymous access.\r\n   *\r\n   * @method getAllProjects\r\n   * @memberOf ProjectClient#\r\n   * @param {Object} [opts] The request options sent to the Jira API.\r\n   * @param {string} [opts.expand]\r\n   * @param {number} [opts.recent]\r\n   * @param {Array<string>} [opts.properties]\r\n   * @param {callback} [callback] Called when the projects have been retrieved.\r\n   * @return {Promise} Resolved when the projects have been retrieved.\r\n   */\n\n  this.getAllProjects = function (opts, callback) {\n    opts = opts || {};\n    var options = {\n      uri: this.jiraClient.buildURL('/project', opts.apiVersion),\n      method: 'GET',\n      followAllRedirects: true,\n      json: true,\n      qs: {\n        expand: opts.expand,\n        recent: opts.recent,\n        properties: opts.properties && opts.properties.join(',')\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n\n  this.updateProject = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/project/' + opts.projectIdOrKey),\n      method: 'PUT',\n      followAllRedirects: true,\n      json: true,\n      qs: {\n        expand: opts.expand\n      },\n      body: {\n        key: opts.key,\n        name: opts.name,\n        projectTypeKey: opts.projectTypeKey,\n        projectTemplateKey: opts.projectTemplateKey,\n        description: opts.description,\n        lead: opts.lead,\n        leadAccountId: opts.leadAccountId,\n        url: opts.url,\n        assigneeType: opts.assigneeType,\n        avatarId: opts.avatarId,\n        issueSecurityScheme: opts.issueSecurityScheme,\n        permissionScheme: opts.permissionScheme,\n        notificationScheme: opts.notificationScheme,\n        categoryId: opts.categoryId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes a project\r\n   *\r\n   * @method deleteProject\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the project has been deleted.\r\n   * @return {Promise} Resolved when the project has been deleted.\r\n   */\n\n\n  this.deleteProject = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Project Deleted');\n  };\n  /**\r\n   * Creates a project.\r\n   *\r\n   * @method createProject\r\n   * @memberOf ProjectClient#\r\n   * @param project The project properties. See {@link https://docs.atlassian.com/jira/REST/latest/#api/2/project}\r\n   * @param [callback] Called when the project has been created.\r\n   * @return {Promise} Resolved when the project has been created.\r\n   */\n\n\n  this.createProject = function (project, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/project'),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: project\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Gets project propertes.\r\n   *\r\n   * @method getProjectProperties\r\n   * @memberOf ProjectClient#\r\n   * @param opts Options\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when properties has been retrieved.\r\n   * @return {Promise} Resolved when properties has been retrieved.\r\n   */\n\n\n  this.getProjectProperties = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/properties', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Contains a full representation of a project in JSON format.\r\n   *\r\n   * All project keys associated with the project will only be returned if expand=projectKeys.\r\n   *\r\n   * @method getProject\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the project is retrieved.\r\n   * @return {Promise} Resolved when the project is retrieved.\r\n   */\n\n\n  this.getProject = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Contains a full representation of a the specified project's components.\r\n   *\r\n   * @method getComponents\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the components are retrieved.\r\n   * @return {Promise} Resolved when the components are retrieved.\r\n   */\n\n\n  this.getComponents = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/components', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get all issue types with valid status values for a project\r\n   *\r\n   * @method getStatuses\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the statuses have been retrieved.\r\n   * @return {Promise} Resolved when the statuses have been retrieved.\r\n   */\n\n\n  this.getStatuses = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/statuses', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Contains a full representation of a the specified project's versions.\r\n   *\r\n   * @method getVersions\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the versions have been retrieved.\r\n   * @return {Promise} Resolved when the versions have been retrieved.\r\n   */\n\n\n  this.getVersions = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/versions', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Contains a paginated representation of a the specified project's versions.\r\n   *\r\n   * @method getVersionsPaginated\r\n   * @memberOf ProjectClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.projectIdOrKey The project id or project key\r\n   * @param {number} [opt.startAt] The index of the first item to return in a page of results\r\n   * @param {number} [opt.maxResults] The maximum number of items to return per page\r\n   * @param {string} [opt.orderBy] Order the results by a field\r\n   * @param {string} [opt.query] Filter the results using a literal string. Versions with matching name or description are returned (case insensitive).\r\n   * @param {string} [opt.status] A list of status values used to filter the results by version status\r\n   * @param {Array}  [opt.expand] The fields to expand\r\n   * @param {callback} [callback] Called when the paginated representation of all versions have been retrieved.\r\n   * @return {Promise} Resolved when the paginated representation of all versions have been retrieved.\r\n   */\n\n\n  this.getVersionsPaginated = function (opts, callback) {\n    var qs = {\n      startAt: opts.startAt,\n      maxResults: opts.maxResults,\n      orderBy: opts.orderBy,\n      query: opts.query,\n      status: opts.status\n    };\n    var options = this.buildRequestOptions(opts, '/version', 'GET', {}, qs);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Contains a list of roles in this project with links to full details.\r\n   *\r\n   * @method getRoles\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param [callback] Called when the roles have been retrieved.\r\n   * @return {Promise} Resolved when the roles have been retrieved.\r\n   */\n\n\n  this.getRoles = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/role', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Details on a given project role.\r\n   *\r\n   * @method getRole\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param opts.roleId The id of the role to retrieve.\r\n   * @param [callback] Called when the roles have been retrieved.\r\n   * @return {Promise} Resolved when the roles have been retrieved.\r\n   */\n\n\n  this.getRole = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Updates a project role to contain the sent actors.\r\n   *\r\n   * @method updateRole\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param opts.roleId The id of the role to retrieve.\r\n   * @param opts.newRole See {@link https://docs.atlassian.com/jira/REST/latest/#d2e108}\r\n   * @param [callback] Called when the roles have been retrieved.\r\n   * @return {Promise} Resolved when the roles have been retrieved.\r\n   */\n\n\n  this.updateRole = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'PUT', opts.newRole);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Add an actor to a project role.\r\n   *\r\n   * @method addToRole\r\n   * @memberOf ProjectClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.projectIdOrKey The project id or project key\r\n   * @param opts.roleId The id of the role to retrieve.\r\n   * @param opts.newRole See {@link https://docs.atlassian.com/jira/REST/latest/#d2e134}\r\n   * @param [callback] Called when the roles have been retrieved.\r\n   * @return {Promise} Resolved when the roles have been retrieved.\r\n   */\n\n\n  this.addToRole = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'POST', opts.newRole);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf ProjectClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {number} opts.projectIdOrKey The id of the project to use in the path.\r\n   * @param {Array} [opts.fields] The fields to include\r\n   * @param {Array} [opts.expand] The fields to expand\r\n   * @param {string} path The path of the endpoint following /project/{id}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    opts = opts || {};\n    var basePath = opts.projectIdOrKey ? '/project/' + opts.projectIdOrKey : '/project';\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n      qs.fields = qs.fields.slice(0, -1);\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n      qs.expand = qs.expand.slice(0, -1);\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}