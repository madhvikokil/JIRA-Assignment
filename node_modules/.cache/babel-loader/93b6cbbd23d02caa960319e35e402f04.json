{"ast":null,"code":"'use strict';\n\nmodule.exports = AgileBoardClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/agile/1.0/dashboard'\r\n * @param {JiraClient} jiraClient\r\n * @constructor AgileBoardClient\r\n */\n\nfunction AgileBoardClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Get a list of all dashboards, optionally filtering them.\r\n   *\r\n   * @method getAllBoards\r\n   * @memberOf AgileBoardClient#\r\n   * @param {Object} [opts] The request options to send to the Jira API\r\n   * @param {string} [opts.type] Limits returning boards of a specific type: `scrum` or `kanban`.\r\n   * @param {number} [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param {string} [opts.name] Filters results to boards that match or partially match the specified name.\r\n   * @param {string} [opts.projectKeyOrId] Filters results to boards that are relevant to a project. Relevance meaning that\r\n   *     the jql filter defined in board contains a reference to a project.\r\n   * @param {number} [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param {string} [opts.accountIdLocation]\r\n   * @param {string} [opts.userkeyLocation]\r\n   * @param {string} [opts.usernameLocation]\r\n   * @param {string} [opts.projectLocation]\r\n   * @param {boolean} [opts.includePrivate] Appends private boards to the end of the list. The name and type fields are\r\n   *      excluded for security reasons.\r\n   * @param {boolean} [opts.negateLocationFiltering] If set to true, negate filters used for querying by location.\r\n   *      By default false.\r\n   * @param {string} [opts.orderBy] Ordering of the results by a given field. If not provided, values will not be\r\n   *      sorted. Valid values: name.\r\n   * @param {string} [opts.expand] List of fields to expand for each board. Valid values: admins, permissions.\r\n   * @param {function} [callback] Called when the dashboards have been retrieved.\r\n   * @return {Promise} Resolved when the dashboards have been retrieved.\r\n   */\n\n  this.getAllBoards = function (opts, callback) {\n    opts = opts || {};\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        type: opts.type,\n        name: opts.name,\n        projectKeyOrId: opts.projectKeyOrId,\n        accountIdLocation: opts.accountIdLocation,\n        userkeyLocation: opts.userkeyLocation,\n        usernameLocation: opts.usernameLocation,\n        projectLocation: opts.projectLocation,\n        includePrivate: opts.includePrivate,\n        negateLocationFiltering: opts.negateLocationFiltering,\n        orderBy: opts.orderBy,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates a board\r\n   *\r\n   * @method createBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param {string} name Must be less than 255 characters.\r\n   * @param {string} type Valid values: scrum, kanban\r\n   * @param {number} filterId ID of a filter that the user has permissions to view. Note, if the\r\n   *  user does not have the 'Create shared objects' permission and tries to create a shared board,\r\n   *  a private board will be created instead (remember that board sharing depends on the filter sharing).\r\n   * @param {object} location The container that the board will be located in. location must include the\r\n   *  type property (Valid values: project, user). If choosing 'project', then a project must be specified\r\n   *  by a projectKeyOrId property in location. If choosing 'user', the current user is chosen by default.\r\n   *  The projectKeyOrId property should not be provided.\r\n   * @param {function} [callback] Called when the sprint has been created.\r\n   * @return {Promise} Resolved when the sprint has been created.\r\n   */\n\n\n  this.createBoard = function (name, type, filterId, location, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board'),\n      method: 'POST',\n      followAllRedirects: true,\n      json: true,\n      body: {\n        name,\n        type,\n        filterId,\n        location\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getBoardByFilterId = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('board/filter/' + opts.filterId),\n      method: 'GET',\n      followAllRedirects: true,\n      json: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a single agile board.\r\n   *\r\n   * @method getBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {function} [callback] Called when the dashboard has been retrieved\r\n   * @return {Promise} Resolved when the dashboard has been retrieved\r\n   */\n\n\n  this.getBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes the board. Admin without the view permission can still remove the board.\r\n   *\r\n   * @method deleteBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {function} [callback] Called when the dashboard has been retrieved\r\n   * @return {Promise} Resolved when the dashboard has been retrieved\r\n   */\n\n\n  this.deleteBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a list of all issues from the board's backlog, for the given board Id.\r\n   *\r\n   * @method getIssuesForBacklog\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {string} [opts.jql] Filters results using a JQL query.\r\n   * @param {boolean} [opts.validateQuery] Specifies whether to valide the JQL query.\r\n   * @param {Array<string> | string} [opts.fields] The list of fields to return for each issue.\r\n   * @param {number} [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param {number} [opts.maxResults] A hint as to the the maximum number of issues to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param {function} [callback] Called when the backlog issues have been retrieved.\r\n   * @return {Promise} Resolved when the backlog issues have been retrieved.\r\n   */\n\n\n  this.getIssuesForBacklog = function (opts, callback) {\n    let fields;\n\n    if (opts.fields) {\n      if (typeof opts.fields === 'string') fields = opts.fields; // backward compatibility\n      else fields = opts.fields.join(',');\n    }\n\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/backlog'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: fields,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get configuration for a board\r\n   *\r\n   * @method getConfiguration\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {function} [callback] Called when the board configuration has been retrieved.\r\n   * @return {Promise} Resolved when the board configuration has been retrieved.\r\n   */\n\n\n  this.getConfiguration = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/configuration'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to\r\n   * view. Note, if the user does not have permission to view the board, no epics will be returned at all.\r\n   *\r\n   * @method getEpics\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {number} [opts.startAt] The starting index of the returned epics. Base index: 0. See the 'Pagination'\r\n   *      section at the top of this page for more details.\r\n   * @param {number} [opts.maxResults] The maximum number of epics to return per page. Default: 50. See the 'Pagination'\r\n   *      section at the top of this page for more details.\r\n   * @param {string} [opts.done] Filters results to epics that are either done or not done. Valid values: true, false.\r\n   * @param {function} [callback] Called when the board configuration has been retrieved.\r\n   * @return {Promise} Resolved when the board configuration has been retrieved.\r\n   */\n\n\n  this.getEpics = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/epic'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        done: opts.done\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that\r\n   * the user has permission to view. Issues returned from this resource include Agile fields, like sprint,\r\n   * closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.\r\n   * \r\n   * @method getIssuesWithoutEpic\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts\r\n   * @param {number | string} opts.boardId\r\n   * @param {number} [opts.startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination'\r\n   *      section at the top of this page for more details.\r\n   * @param {number} [opts.maxResults] The maximum number of issues to return per page. Default: 50. See the\r\n   *      'Pagination' section at the top of this page for more details. Note, the total number of issues returned is\r\n   *      limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit,\r\n   *      your results will be truncated.\r\n   * @param {string} [opts.jql] Filters results using a JQL query. If you define an order in your JQL query, it will\r\n   *      override the default order of the returned issues.\r\n   *      Note that username and userkey have been deprecated as search terms for this parameter. See the migration guide\r\n   *      for details. Use accountId instead.\r\n   * @param {boolean} [opts.validateQuery] Specifies whether to validate the JQL query or not. Default: true.\r\n   * @param {Array<string>} [opts.fields] The list of fields to return for each issue. By default, all navigable and\r\n   *      Agile fields are returned.\r\n   * @param {string} [opts.expand] A comma-separated list of the parameters to expand.\r\n   * @param {function} [callback] Called when the board configuration has been retrieved.\r\n   * @return {Promise} Resolved when the board configuration has been retrieved.\r\n   */\n\n\n  this.getIssuesWithoutEpic = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/epic/none/issue'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getIssuesForEpic = function (opts, callback) {\n    var options = {\n      uri: 'board' + opts.boardId + '/epic/' + opts.epicId + '/issue',\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getFeaturesForBoard = function (opts, callback) {\n    var options = {\n      uri: 'board' + opts.boardId + '/features',\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.toggleFeatures = function (opts, callback) {\n    var options = {\n      uri: 'board' + opts.boardId + '/features',\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: {\n        boardId: opts.boardIdBody,\n        feature: opts.feature,\n        enabling: opts.enabling\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a list of all issues associated with an agile board\r\n   *\r\n   * @method getIssuesForBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param opts.boardId The agile board id.\r\n   * @param [opts.startAt] The index of the first issue to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param [opts.maxResults] A hint as to the the maximum number of issues to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param [opts.jql] Filters results using a JQL query. If you define an order in your JQL query, it will override\r\n   *     the default order of the returned issues. Note that username and userkey have been deprecated as search terms\r\n   *     for this parameter. See the migration guide for details. Use accountId instead.\r\n   * @param [opts.fields] The list of fields to return for each issue. By default, all navigable and Agile fields are\r\n   *     returned.\r\n   * @param [opts.expand] The parameters to expand\r\n   * @param [callback] Called when the issues have been retrieved.\r\n   * @return {Promise} Resolved when the issues have been retrieved.\r\n   */\n\n\n  this.getIssuesForBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/issue'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.moveIssuesToBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/issue'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        issues: opts.issues ? opts.issues.join(',') : undefined,\n        rankBeforeIssue: opts.rankBeforeIssue,\n        rankAfterIssue: opts.rankAfterIssue,\n        rankCustomFieldId: opts.rankCustomFieldId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getProjects = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/project'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getProjectsFull = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/project/full'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getBoardPropertyKeys = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/properties'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getBoardProperty = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/properties/' + opts.propertyKey),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets the value of the specified board's property. You can use this resource to store a\r\n   * custom data against the board identified by the id. The user who stores the data is required\r\n   * to have permissions to modify the board.\r\n   * \r\n   * @method setBoardProperty\r\n   * @memberof AgileBoardClient\r\n   * @param {Object} opts\r\n   * @param {string | number} opts.boardId\r\n   * @param {string | number} opts.propertyKey\r\n   * @param {any} opts.property specified board's property.\r\n   * @param {callback} [callback]\r\n   * @returns {Promise}\r\n   */\n\n\n  this.setBoardProperty = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/properties/' + opts.propertyKey),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.property\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.deleteBoardProperty = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/properties/' + opts.propertyKey),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getAllQuickFilters = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/quickfilter'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getQuickFilter = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/quickfilter/' + opts.quickFilterId),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a list of sprints associated with an agile board\r\n   * \r\n   * @deprecated Use board.getAllSprints\r\n   *\r\n   * @method getSprintsForBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param opts.boardId The agile board id.\r\n   * @param [opts.startAt] The index of the first sprint to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param [opts.maxResults] A hint as to the the maximum number of sprints to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param [opts.state] Optionally filter by state, e.g. 'active'.\r\n   * @param callback Called when the sprints have been retrieved.\r\n   * @return {Promise} Resolved when the sprints have been retrieved.\r\n   */\n\n\n  this.getSprintsForBoard = function (opts, callback) {\n    return this.getAllSprints(opts, callback);\n  };\n  /**\r\n   * Get a list of projects associated board\r\n   *\r\n   * @method getProjectsForBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param opts The request options to send to the Jira API\r\n   * @param opts.boardId The agile board id.\r\n   * @param [opts.startAt] The index of the first sprint to return (0-based). must be 0 or a multiple of\r\n   *     maxResults\r\n   * @param [opts.maxResults] A hint as to the the maximum number of sprints to return in each call. Note that the\r\n   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client\r\n   *     provides, dues to lack or resources or any other condition. When this happens, your results will be\r\n   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively\r\n   *     being used.\r\n   * @param callback Called when the sprints have been retrieved.\r\n   * @return {Promise} Resolved when the sprints have been retrieved.\r\n   */\n\n\n  this.getProjectsForBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/project'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get reports for associated board\r\n   *\r\n   * @method getReportsForBoard\r\n   * @memberOf AgileBoardClient#\r\n   * @param {Object} opts The request options to send to the Jira API\r\n   * @param {number} opts.boardId The agile board id.\r\n   * @param {function} [callback] Called when the sprints have been retrieved.\r\n   * @return {Promise} Resolved when the sprints have been retrieved.\r\n   */\n\n\n  this.getReportsForBoard = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/reports'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getAllSprints = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/sprint'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        state: opts.state\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getIssuesForSprint = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/sprint/' + opts.sprintId + '/issue'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        jql: opts.jql,\n        validateQuery: opts.validateQuery,\n        fields: opts.fields ? opts.fields.join(',') : undefined,\n        expand: opts.expand\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  }; // TODO add JsDoc\n\n\n  this.getAllVersions = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/version'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        released: opts.released\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}