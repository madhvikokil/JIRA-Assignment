{"ast":null,"code":"var _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchTable.js\";\nimport React from 'react';\nimport FetchBody from '../utility/fetchBody';\nexport default {\n  tableHeader: props => {\n    let o = Object.keys(props[0]);\n    return o.map(key => {\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, key.toUpperCase());\n    });\n  },\n  //      renderRow:(props)=>{\n  //                 return props.keys.map((key, index)=>{\n  //                 return <td key={props.data[key]}>{props.data[key]}</td>\n  //                 })\n  //                },\n  tableRow: props => {\n    // var items = props;\n    // let propsLength = props.length;\n    // for(let i=0;i<propsLength;i++){\n    //         let o = Object.values(props[i]);\n    // return items.map((row, index)=>{\n    // return <tr key={index}><td>{o}</td></tr>\n    // })\n    //     let lengthOfProps = props.length;\n    //     let o=0;\n    //      o = Object.values(props[o]);\n    //      o = o + 1;\n    //     return props.map((row)=>{\n    //         return (<><tr>\n    //                 <td >{row.o}</td>\n    //                 {/* <td>{row.user}</td> */}\n    //                 </tr></>)\n    var items = props;\n    let keys = Object.keys(props[0]);\n    return items.map((row, index) => {\n      return React.createElement(\"tr\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(FetchBody.RenderRow, {\n        key: index,\n        data: row,\n        keys: keys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    });\n  }\n};","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchTable.js"],"names":["React","FetchBody","tableHeader","props","o","Object","keys","map","key","toUpperCase","tableRow","items","row","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,eAAe;AAEXC,EAAAA,WAAW,EAAGC,KAAD,IAAW;AACpB,QAAIC,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAAC,CAAD,CAAjB,CAAR;AACA,WAAOC,CAAC,CAACG,GAAF,CAAOC,GAAD,IAAO;AACZ,aAAO;AAAI,QAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeA,GAAG,CAACC,WAAJ,EAAf,CAAP;AACC,KAFF,CAAP;AAGH,GAPU;AASf;AACA;AACA;AACA;AACA;AAEIC,EAAAA,QAAQ,EAAGP,KAAD,IAAU;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,QAAIQ,KAAK,GAAGR,KAAZ;AACA,QAAIG,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYH,KAAK,CAAC,CAAD,CAAjB,CAAX;AACA,WAAOQ,KAAK,CAACJ,GAAN,CAAU,CAACK,GAAD,EAAMC,KAAN,KAAc;AAC/B,aAAO;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgB,oBAAC,SAAD,CAAW,SAAX;AAAqB,QAAA,GAAG,EAAEA,KAA1B;AAAiC,QAAA,IAAI,EAAED,GAAvC;AAA4C,QAAA,IAAI,EAAEN,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB,CAAP;AACC,KAFM,CAAP;AAMK;AA5CE,CAAf","sourcesContent":["import React from 'react';\nimport FetchBody from '../utility/fetchBody';\nexport default {\n\n    tableHeader: (props) => {\n        let o = Object.keys(props[0]);\n        return o.map((key)=>{\n                return <th key={key}>{key.toUpperCase()}</th>\n                })\n    },\n\n//      renderRow:(props)=>{\n//                 return props.keys.map((key, index)=>{\n//                 return <td key={props.data[key]}>{props.data[key]}</td>\n//                 })\n//                },\n    \n    tableRow: (props) =>{\n\n        // var items = props;\n        // let propsLength = props.length;\n        // for(let i=0;i<propsLength;i++){\n        //         let o = Object.values(props[i]);\n        // return items.map((row, index)=>{\n        // return <tr key={index}><td>{o}</td></tr>\n        // })\n\n        //     let lengthOfProps = props.length;\n        //     let o=0;\n        //      o = Object.values(props[o]);\n        //      o = o + 1;\n        //     return props.map((row)=>{\n        //         return (<><tr>\n        //                 <td >{row.o}</td>\n        //                 {/* <td>{row.user}</td> */}\n        //                 </tr></>)\n               \n                  \n        var items = props;\n        let keys = Object.keys(props[0]);\n        return items.map((row, index)=>{\n        return <tr key={index}><FetchBody.RenderRow key={index} data={row} keys={keys}/></tr>\n        })\n\n        \n                \n            },\n\n            \n        \n        \n }\n"]},"metadata":{},"sourceType":"module"}