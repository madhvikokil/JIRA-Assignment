{"ast":null,"code":"\"use strict\";\n\nvar errorStrings = require('./../lib/error');\n\nmodule.exports = IssueLinkClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/issueLink'\r\n * @param {JiraClient} jiraClient\r\n * @constructor IssueLinkClient\r\n */\n\nfunction IssueLinkClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Creates an issue link between two issues. The user requires the link issue permission for the issue which will\r\n   * be linked to another issue. The specified link type in the request is used to create the link and will create a\r\n   * link from the first issue to the second issue using the outward description. It also create a link from the\r\n   * second issue to the first issue using the inward description of the issue link type. It will add the supplied\r\n   * comment to the first issue. The comment can have a restriction who can view it. If group is specified, only\r\n   * users of this group can view this comment, if roleLevel is specified only users who have the specified role can\r\n   * view this comment. The user who creates the issue link needs to belong to the specified group or have the\r\n   * specified role.\r\n   *\r\n   * @memberOf IssueLinkClient#\r\n   * @method createIssueLink\r\n   * @param opts The options for the request sent to the Jira API\r\n   * @param opts.issueLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e5010}\r\n   * @param [callback] Called when the link has been created.\r\n   * @return {Promise} Resolved when the link has been created.\r\n   */\n\n  this.createIssueLink = function (opts, callback) {\n    if (!opts.issueLink) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_ERROR);\n    }\n\n    var options = {\n      method: 'POST',\n      uri: this.jiraClient.buildURL('/issueLink'),\n      json: true,\n      followAllRedirects: true,\n      body: opts.issueLink\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Issue Link Created');\n  };\n  /**\r\n   * Gets an issue link with the specified id.\r\n   *\r\n   * @method getIssueLink\r\n   * @memberOf IssueLinkClient#\r\n   * @param opts The options used in the request to the Jira API\r\n   * @param opts.linkId The id of the link to retrieve.\r\n   * @param [callback] Called when the Issue Link has been retrieved.\r\n   * @return {Promise} Resolved when the Issue Link has been retrieved.\r\n   */\n\n\n  this.getIssueLink = function (opts, callback) {\n    if (!opts.linkId) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_ID_ERROR);\n    }\n\n    var options = {\n      method: 'GET',\n      uri: this.jiraClient.buildURL('/issueLink/' + opts.linkId),\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Deletes an issue link with the specified id. To be able to delete an issue link you must be able to view both\r\n   * issues and must have the link issue permission for at least one of the issues.\r\n   *\r\n   * @method deleteIssueLink\r\n   * @memberOf IssueLinkClient#\r\n   * @param opts The options used in the request to the Jira API\r\n   * @param opts.linkId The id of the link to delete.\r\n   * @param [callback] Called when the Issue Link has been deleted.\r\n   * @return {Promise} Resolved when the Issue Link has been deleted.\r\n   */\n\n\n  this.deleteIssueLink = function (opts, callback) {\n    if (!opts.linkId) {\n      throw new Error(errorStrings.NO_ISSUE_LINK_ID_ERROR);\n    }\n\n    var options = {\n      method: 'DELETE',\n      uri: this.jiraClient.buildURL('/issueLink/' + opts.linkId),\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Issue Link Deleted');\n  };\n}","map":null,"metadata":{},"sourceType":"script"}