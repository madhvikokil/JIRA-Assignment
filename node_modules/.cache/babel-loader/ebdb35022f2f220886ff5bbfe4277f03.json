{"ast":null,"code":"var _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js\";\nimport React from 'react';\nexport default {\n  RenderRow: props => {\n    return props.keys.map((key, index) => {\n      if (key == \"issue_count\") {\n        let total = 100;\n        let progressBar = props.data[key] * 100 / total;\n        return React.createElement(\"th\", {\n          key: props.data[key],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: \"width: 50%; display: inline-block; background-color: blue;\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: \"width: 25%; background-color: brown;\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        })), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, \"25%\")); //return <th key={props.data[key]}>{props.data[key]}</th>\n      } else return React.createElement(\"th\", {\n        key: props.data[key],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, props.data[key]);\n    });\n  }\n};\n{\n  /* <th key={key}>{key.toUpperCase()}</th> */\n}","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/utility/fetchBody.js"],"names":["React","RenderRow","props","keys","map","key","index","total","progressBar","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAc;AACVC,EAAAA,SAAS,EAAEC,KAAD,IAAS;AACf,WAAOA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAc;AACpC,UAAGD,GAAG,IAAI,aAAV,EACA;AACI,YAAIE,KAAK,GAAC,GAAV;AACA,YAAIC,WAAW,GAAGN,KAAK,CAACO,IAAN,CAAWJ,GAAX,IAAkB,GAAlB,GAAwBE,KAA1C;AACC,eAAS;AAAI,UAAA,GAAG,EAAIL,KAAK,CAACO,IAAN,CAAWJ,GAAX,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACM;AAAK,UAAA,KAAK,EAAC,4DAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAM,UAAA,KAAK,EAAC,sCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADN,EAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJN,CAAT,CAHL,CASI;AACH,OAXD,MAYI,OAAO;AAAI,QAAA,GAAG,EAAEH,KAAK,CAACO,IAAN,CAAWJ,GAAX,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BH,KAAK,CAACO,IAAN,CAAWJ,GAAX,CAA3B,CAAP;AACH,KAdM,CAAP;AAeA;AAjBM,CAAd;AAyBA;AAAC;AAA6C","sourcesContent":["import React from 'react';\n\nexport default{\n    RenderRow:(props)=>{\n        return props.keys.map((key, index)=>{\n        if(key == \"issue_count\")\n        {\n            let total=100;\n            let progressBar = props.data[key] * 100 / total;\n             return  (<th key = {props.data[key]}> \n                            <div style=\"width: 50%; display: inline-block; background-color: blue;\">\n                            <span style=\"width: 25%; background-color: brown;\"></span>\n                            </div>\n                            <span>25%</span>\n                            </th>)\n            //return <th key={props.data[key]}>{props.data[key]}</th>\n        }else\n            return <th key={props.data[key]}>{props.data[key]}</th>\n        })\n       }\n      \n}\n\n\n\n\n\n{/* <th key={key}>{key.toUpperCase()}</th> */}"]},"metadata":{},"sourceType":"module"}