{"ast":null,"code":"\"use strict\";\n\nmodule.exports = VersionClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/version'\r\n * @param {JiraClient} jiraClient\r\n * @constructor VersionClient\r\n */\n\nfunction VersionClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Creates a version\r\n   *\r\n   * @method createVersion\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts Details about a project version.\r\n   * @param {string} [opts.version] Body. See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3549}\r\n   * @param {string} [opts.expand] \r\n   * @param {string} [opts.description] The description of the version. Optional when creating or updating a version.\r\n   * @param {string} [opts.name] The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.\r\n   * @param {boolean} [opts.archived] Indicates that the version is archived. Optional when creating or updating a version.\r\n   * @param {boolean} [opts.released] Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.\r\n   * @param {string} [opts.startDate] The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.\r\n   * @param {string} [opts.releaseDate] The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.\r\n   * @deprecated @param {string} [opts.project] Deprecated. Use projectId. \r\n   * @param {number} [opts.projectId] The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.\r\n   * @param {string} [opts.moveUnfixedIssuesTo] The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.\r\n   * @param {callback} [callback] Called when the version has been created.\r\n   * @return {Promise} Resolved when the version has been created.\r\n   */\n\n  this.createVersion = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/version'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.version || {\n        expand: opts.expand,\n        description: opts.description,\n        name: opts.name,\n        archived: opts.archived,\n        released: opts.released,\n        startDate: opts.startDate,\n        releaseDate: opts.releaseDate,\n        project: opts.project,\n        projectId: opts.projectId,\n        moveUnfixedIssuesTo: opts.moveUnfixedIssuesTo\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify a version's sequence within a project. The move version bean has 2 alternative field value pairs\r\n   * (opts.position or opts.after).  One and only one of these two must be provided.\r\n   *\r\n   * @method moveVersion\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.versionId The id of the version to move.\r\n   * @param {string} [opts.position] An absolute position, which may have a value of 'First', 'Last', 'Earlier' or\r\n   *     'Later'. Must be provided if opts.after is missing.\r\n   * @param {string} [opts.after] A version to place this version after. The value should be the self link of another\r\n   *     version. Must be provided if opts.position is missing\r\n   * @param [callback] Called when the version has been moved.\r\n   * @return {Promise} Resolved when the version has been moved.\r\n   */\n\n\n  this.moveVersion = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/move', 'POST', {\n      position: opts.position,\n      after: opts.after\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Get a all versions from specific board.\r\n  *\r\n  * @method getAllVersions\r\n  * @memberOf VersionClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {string|number} opts.boardId The id of the board which contains versions to retrieve.\r\n  * @param {callback} [callback] Called when all versions are retrieved.\r\n  * @return {Promise} Resolved when all versions are retrieved.\r\n  */\n\n\n  this.getAllVersions = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildAgileURL(\"/board/\".concat(opts.boardId, \"/version\")),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        filter: opts.filter,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a project version.\r\n   *\r\n   * @method getVersion\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string|number} opts.versionId The id of the version to retrieve.\r\n   * @param {callback} [callback] Called when the version is retrieved.\r\n   * @return {Promise} Resolved when the version is retrieved.\r\n   */\n\n\n  this.getVersion = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify an existing version; any omitted fields will be ignored.\r\n   *\r\n   * @method editVersion\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts The request options sent to Jira.\r\n   * @param {string} opts.versionId The id of the version to edit.\r\n   * @param {Object} opts.version See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3619}\r\n   * @param {callback} [callback] Called when the version has been modified.\r\n   * @return {Promise} Resolved when the version has been modified.\r\n   */\n\n\n  this.editVersion = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'PUT', opts.version);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a bean containing the number of fixed in and affected issues for the given version.\r\n   *\r\n   * @method getRelatedIssueCounts\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version for which to retrieve related issues.\r\n   * @param {callback} [callback] Called when the count has been retrieved.\r\n   * @return {Promise} Resolved when the count has been retrieved.\r\n   */\n\n\n  this.getRelatedIssueCounts = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/relatedIssueCounts', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the number of unresolved issues for the given version\r\n   *\r\n   * @method getUnresolvedIssueCount\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version for which to retrieve unresolved issues.\r\n   * @param {callback} [callback] Called when the count has been retrieved.\r\n   * @return {Promise} Resolved when the count has been retrieved.\r\n   */\n\n\n  this.getUnresolvedIssueCount = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/unresolvedIssueCount', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the remote version links associated with the given version id.\r\n   *\r\n   * @method getRemoteLinks\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version for which to retrieve remote links.\r\n   * @param {callback} [callback] Called when the links have been retrieved.\r\n   * @return {Promise} Resolved when the links have been retrieved.\r\n   */\n\n\n  this.getRemoteLinks = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/remotelink', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Create a remote version link via POST. The link's global id will be taken from the JSON payload if provided;\r\n   * otherwise, it will be generated.\r\n   *\r\n   * @method createRemoteLink\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version for which to retrieve unresolved issues.\r\n   * @param opts.remoteLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3753}\r\n   * @param {callback} [callback] Called when the remote link has been created.\r\n   * @return {Promise} Resolved when the remote link has been created.\r\n   */\n\n\n  this.createRemoteLink = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/remotelink', 'POST', opts.remoteLink);\n    return this.jiraClient.makeRequest(options, callback, 'Remotelink Created');\n  };\n  /**\r\n   * Get a REST sub-resource representing a remote version link.\r\n   *\r\n   * @method getRemoteLinks\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version for which to retrieve the remote link\r\n   * @param opts.remoteLinkId The global id of the remote link\r\n   * @param {callback} [callback] Called when the link has been retrieved.\r\n   * @return {Promise} Resolved when the link has been retrieved.\r\n   */\n\n\n  this.getRemoteLink = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/remotelink/' + opts.remoteLinkId, 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete a remote version link.\r\n   *\r\n   * @method deleteRemoteLink\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.versionId The version id\r\n   * @param opts.remoteLinkId The global id of the remote link\r\n   * @param {callback} [callback] Called when the link has been deleted.\r\n   * @return {Promise} Resolved when the link has been deleted.\r\n   */\n\n\n  this.deleteRemoteLink = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/remotelink/' + opts.remoteLinkId, 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Remote Link Deleted');\n  };\n  /**\r\n   * Delete a project version.\r\n   *\r\n   * @method deleteVersion\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string|number} opts.versionId The id of the version to delete.\r\n   * @param {callback} [callback] Called when the version is deleted.\r\n   * @return {Promise} Resolved when the version is deleted.\r\n   */\n\n\n  this.deleteVersion = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Version Deleted');\n  };\n  /**\r\n   * Delete all remote version links for a given version id.\r\n   *\r\n   * @method deleteAllRemoteLinks\r\n   * @memberOf VersionClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string|number} opts.versionId The id of the version to delete.\r\n   * @param {callback} [callback] Called when the version is deleted.\r\n   * @return {Promise} Resolved when the version is deleted.\r\n   */\n\n\n  this.deleteAllRemoteLinks = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/remotelink', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Remote Links Deleted');\n  };\n  /**\r\n   * Returns the remote version links for a given global id.\r\n   *\r\n   * @method getGlobalRemoteLink\r\n   * @memberOf VersionClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.globalId The global id of the remote resource that is linked to the versions\r\n   * @param {callback} [callback] Called when the remote link is returned.\r\n   * @return {Promise} Resolved when the remote link is returned.\r\n   */\n\n\n  this.getGlobalRemoteLink = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/version/remotelink'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        globalId: opts.globalId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf FilterClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {number} opts.versionId The id of the screen to use in the path.\r\n   * @param {Array} [opts.fields] The fields to include\r\n   * @param {Array} [opts.expand] The fields to expand\r\n   * @param {string} path The path of the endpoint following /version/{id}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    var basePath = '/version/' + opts.versionId;\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n      qs.fields = qs.fields.slice(0, -1);\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n      qs.expand = qs.expand.slice(0, -1);\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}