{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ComponentClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/component'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor ComponentClient\r\n */\n\nfunction ComponentClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Create a component via POST.\r\n   *\r\n   * @method createComponent\r\n   * @memberOf ComponentClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.component See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3871}\r\n   * @param [callback] Called when the component has been created.\r\n   * @return {Promise} Resolved when the component has been created.\r\n   */\n\n  this.createComponent = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/component'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.component\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a\r\n   * field is not present, it is silently ignored. If leadUserName is an empty string (\"\") the component lead will be\r\n   * removed.\r\n   *\r\n   * @method editComponent\r\n   * @memberOf ComponentClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.id The id of the component to edit.\r\n   * @param opts.component The new data to place in the component.  See\r\n   *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3939}\r\n   * @param [callback] Called when the component has beed edited.\r\n   * @return {Promise} Resolved when the component has beed edited.\r\n   */\n\n\n  this.editComponent = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/component/' + opts.id),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      body: opts.component\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get a project component.\r\n   *\r\n   * @method getComponent\r\n   * @memberOf ComponentClient#\r\n   * @param opts The options sent to the Jira API\r\n   * @param opts.id The id of the component to edit.\r\n   * @param [callback] Called when the component has been retrieved.\r\n   * @return {Promise} Resolved when the component has been retrieved.\r\n   */\n\n\n  this.getComponent = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/component/' + opts.id),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete a project component.\r\n   *\r\n   * @method deleteComponent\r\n   * @memberOf ComponentClient#\r\n   * @param opts The options sent to the Jira API\r\n   * @param opts.id The id of the component to edit.\r\n   * @param [opts.moveIssuesTo] The new component applied to issues whose 'id' component will be deleted. If this\r\n   *     value is null, then the 'id' component is simply removed from the related isues.\r\n   * @param [callback] Called when the component has been deleted.\r\n   * @return {Promise} Resolved when the component has been deleted.\r\n   */\n\n\n  this.deleteComponent = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/component/' + opts.id),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Project Component Deleted');\n  };\n  /**\r\n   * Get counts of issues related to this component.\r\n   *\r\n   * @method getRelatedIssueCounts\r\n   * @memberOf ComponentClient#\r\n   * @param opts The options sent to the Jira API\r\n   * @param opts.id The id of the component to edit.\r\n   * @param [callback] Called when the count has been retrieved.\r\n   * @return {Promise} Resolved when the count has been retrieved.\r\n   */\n\n\n  this.getRelatedIssueCounts = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/component/' + opts.id + '/relatedIssueCounts'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}