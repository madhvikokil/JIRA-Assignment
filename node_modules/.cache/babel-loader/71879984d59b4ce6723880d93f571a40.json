{"ast":null,"code":"import _defineProperty from \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/component/chart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { PieChart, Pie, Cell } from 'recharts'; //import Axios from '../../axios-orders';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nconst RADIAN = Math.PI / 180;\nexport default class AnotherChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allUser: [],\n      allPost: [],\n      data: []\n    };\n\n    this.chartForAuthor = async () => {\n      let users = [];\n      let posts = [];\n      let newData = [];\n\n      try {\n        users = await Axios.get('/userData.json');\n        posts = await Axios.get('/newPosts.json').then(res => {\n          console.log(res);\n\n          for (let key in res.data) {\n            // console.log(\"user\",users.data);\n            // console.log(\"Posts:\",posts);\n            posts.push(_objectSpread({}, res.data[key], {\n              id: key\n            }));\n            console.log(\"id:\", key);\n          }\n\n          console.log(\"users:\", users); // console.log(\"posts:\",posts);\n\n          Object.keys(users.data).forEach(key => {\n            console.log(users.data);\n            const array = posts.filter(post => post.userId == key);\n\n            if (array.length) {\n              newData.push({\n                name: users.data[key].name,\n                value: array.length\n              });\n            }\n          });\n          this.setState({\n            data: newData\n          });\n          console.log(\"data\", this.state.data);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.renderCustomizedLabel = ({\n      cx,\n      cy,\n      midAngle,\n      innerRadius,\n      outerRadius,\n      percent,\n      index\n    }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n      const x = cx + radius * Math.cos(-midAngle * RADIAN);\n      const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      return React.createElement(\"text\", {\n        x: x,\n        y: y,\n        fill: \"white\",\n        textAnchor: x > cx ? 'start' : 'end',\n        dominantBaseline: \"central\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"\".concat((percent * 100).toFixed(0), \"%\"));\n    };\n  }\n\n  componentDidMount() {//sthis.chartForAuthor();\n  }\n\n  render() {\n    return React.createElement(PieChart, {\n      width: 400,\n      height: 400,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Pie, {\n      data: this.state.data,\n      cx: 300,\n      cy: 200,\n      labelLine: false,\n      label: this.renderCustomizedLabel,\n      outerRadius: 80,\n      fill: \"#8884d8\",\n      dataKey: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.data.map((entry, index) => React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: COLORS[index % COLORS.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/madhavi/Documents/jira-assignment/JIRA-Assignment/src/component/chart.js"],"names":["React","PureComponent","PieChart","Pie","Cell","COLORS","RADIAN","Math","PI","AnotherChart","state","allUser","allPost","data","chartForAuthor","users","posts","newData","Axios","get","then","res","console","log","key","push","id","Object","keys","forEach","array","filter","post","userId","length","name","value","setState","error","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin","toFixed","componentDidMount","render","map","entry"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {PieChart,Pie,Cell} from 'recharts'\n//import Axios from '../../axios-orders';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nconst RADIAN = Math.PI / 180;\n\nexport default class AnotherChart extends PureComponent {\n\n\tstate={\n\t\tallUser:[],\n\t\tallPost:[],\n\t\tdata:[]\n\t}\n\n\n\n  chartForAuthor = async () => {\n\t\tlet users=[];\n\t\tlet posts=[];\n\t\tlet newData=[];\n\t\ttry {\n         \n            users = await Axios.get('/userData.json')\n            posts = await Axios.get('/newPosts.json')\n            .then(res=>{\n                console.log(res);\n                for ( let key in res.data ) {\n                    // console.log(\"user\",users.data);\n                    // console.log(\"Posts:\",posts);\n                    posts.push({\n                        ...res.data[key],\n                        id: key\n                    } );\n                    console.log(\"id:\",key);\n                }\n                 console.log(\"users:\",users);\n                // console.log(\"posts:\",posts);\n\t\t\t\tObject.keys(users.data).forEach(key => {\n                    console.log(users.data);\n\t\t\t\t\tconst array = posts.filter(post => post.userId == key);\n\t\t\t\t\tif (array.length) {\n\t\t\t\t\tnewData.push({name: users.data[key].name, value: array.length });\n\t\t\t\t\t}\n\t\t\t\t  })\n\n                  this.setState({data:newData});\n                  console.log(\"data\",this.state.data);\n\t\t\t\t\n\t\t\t}\n\t)\n\t\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\n\t}\n\t\n\tcomponentDidMount(){\n\n\t\t//sthis.chartForAuthor();\n\t\n    }\n    \n    renderCustomizedLabel = ({\n\t\tcx, cy, midAngle, innerRadius, outerRadius, percent, index,\n\t}) => {\n\t\tconst radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n\t\tconst x = cx + radius * Math.cos(-midAngle * RADIAN);\n\t\tconst y = cy + radius * Math.sin(-midAngle * RADIAN);\n\t\n\t\treturn (\n\t\t\t<text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n\t\t\t\t{`${(percent * 100).toFixed(0)}%`}\n\t\t\t</text>\n\t\t);\n\t};\n\t\n\trender() {\n \n\t\treturn (\n\t\t\t<PieChart width={400} height={400}>\n\t\t\t\t<Pie\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tcx={300}\n\t\t\t\t\tcy={200}\n\t\t\t\t\tlabelLine={false}\n\t\t\t\t\tlabel={this.renderCustomizedLabel}\n\t\t\t\t\touterRadius={80}\n\t\t\t\t\tfill=\"#8884d8\"\n\t\t\t\t\tdataKey=\"value\"\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n\t\t\t\t\t}\n\t\t\t\t</Pie>\n\t\t\t</PieChart>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}