{"ast":null,"code":"\"use strict\";\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nmodule.exports = UserClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/user'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor UserClient\r\n */\n\nfunction UserClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Get a user. This resource cannot be accessed anonymously.\r\n   *\r\n   * @method getUser\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param {string} [opts.accountId] The account ID of the user\r\n   * @param {string} [opts.username] The name of the user to retrieve.\r\n   * @param {string} [opts.userKey] The key of the user to retrieve.\r\n   * @param {string} [opts.expand] The fields to be expanded.\r\n   * @param {callback} [callback] Called when the user has been retrieved.\r\n   * @return {Promise} Resolved when the user has been retrieved.\r\n   */\n\n  this.getUser = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        accountId: opts.accountId,\n        username: opts.username,\n        key: opts.userKey,\n        expand: opts.expand\n      }\n    };\n\n    if (opts.expand) {\n      options.qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        options.qs.expand += ex + ',';\n      });\n    }\n\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes user.\r\n   *\r\n   * @method deleteUser\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.username The name of the user to delete.\r\n   * @param opts.userKey The key of the user to delete.\r\n   * @param [callback] Called when the user has been deleted.\r\n   * @return {Promise} Resolved when the user has been deleted.\r\n   */\n\n\n  this.deleteUser = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        key: opts.userKey\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'User removed.');\n  };\n  /**\r\n   * Create user. By default created user will not be notified with email. If password field is not set then password\r\n   * will be randomly generated.\r\n   *\r\n   * @method createUser\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.user See {@link https://docs.atlassian.com/jira/REST/latest/#d2e4049}\r\n   * @param [callback] Called when the user has been created.\r\n   * @return {Promise} Resolved when the user has been created.\r\n   */\n\n\n  this.createUser = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.user\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Modify user. The \"value\" fields present will override the existing value. Fields skipped in request will not be\r\n   * changed.\r\n   *\r\n   * @method editUser\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.user See {@link https://docs.atlassian.com/jira/REST/latest/#d2e4081}\r\n   * @param opts.username The name of the user to edit.\r\n   * @param opts.userKey The key of the user to edit.\r\n   * @param [callback] Called when the user has been edited.\r\n   * @return {Promise} Resolved when the user has been edited.\r\n   */\n\n\n  this.editUser = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        key: opts.userKey\n      },\n      body: opts.user\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of users that match the search string and can be assigned issues for all the given projects. This\r\n   * resource cannot be accessed anonymously.\r\n   *\r\n   * @method multiProjectSearchAssignable\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The name of the user to search.\r\n   * @param {Array} opts.projectKeys The keys of the projects we are finding assignable users for\r\n   * @param {number} [opts.startAt] The index of the first user to return (0-based)\r\n   * @param {number} [opts.maxResults] The maximum number of users to return (defaults to 50). The maximum allowed\r\n   *     value is 1000. If you specify a value that is higher than this number, your search results will be\r\n   *     truncated.\r\n   * @param [callback] Called when the search results have been retrieved.\r\n   * @return {Promise} Resolved when the search results have been retrieved.\r\n   */\n\n\n  this.multiProjectSearchAssignable = function (opts, callback) {\n    var projectKeyString = '';\n\n    if (opts.projectKeys) {\n      opts.projectKeys.forEach(function (key) {\n        projectKeyString += key + ',';\n      });\n      projectKeyString = projectKeyString.slice(0, -1);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/user/assignable/multiProjectSearch'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        projectKeys: projectKeyString,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of users that match the search string. This resource cannot be accessed anonymously. Please note\r\n   * that this resource should be called with an issue key when a list of assignable users is retrieved for editing.\r\n   * For create only a project key should be supplied. The list of assignable users may be incorrect if it's called\r\n   * with the project key for editing.\r\n   *\r\n   * @method searchAssignable\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param {string} opts.project The key of the project we are finding assignable users for\r\n   * @param {string} [opts.issueKey] The issue key for the issue being edited we need to find assignable users for.\r\n   * @param {number} [opts.startAt] The index of the first user to return (0-based)\r\n   * @param {number} [opts.maxResults] The maximum number of users to return (defaults to 50). The maximum allowed\r\n   *     value is 1000. If you specify a value that is higher than this number, your search results will be\r\n   *     truncated.\r\n   * @param {number} [opts.actionDescriptorId]\r\n   * @param [callback] Called when the search results have been retrieved.\r\n   * @return {Promise} Resolved when the search results have been retrieved.\r\n   */\n\n\n  this.searchAssignable = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/assignable/search'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        project: opts.project,\n        issueKey: opts.issueKey,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        actionDescriptorId: opts.actionDescriptorId\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Creates temporary avatar. Creating a temporary avatar is part of a 3-step process in uploading a new avatar for\r\n   * a user: upload, crop, confirm.\r\n   *\r\n   * @method createTemporaryAvatar\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param {string} opts.filepath The path to the file to upload.\r\n   * @param [callback] Called when the temporary avatar has been uploaded.\r\n   * @return {Promise} Resolved when the temporary avatar has been uploaded.\r\n   */\n\n\n  this.createTemporaryAvatar = function (opts, callback) {\n    var extension = path.extname(opts.filepath).slice(1);\n    var baseName = path.basename(opts.filepath);\n    var fileSize = fs.statSync(opts.filepath).size;\n    extension = extension == 'jpg' ? 'jpeg' : extension;\n    var options = {\n      uri: this.jiraClient.buildURL('/user/avatar/temporary'),\n      method: 'POST',\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        filename: baseName,\n        size: fileSize\n      },\n      body: fs.readFileSync(opts.filepath),\n      headers: {\n        \"X-Atlassian-Token\": 'no-check',\n        \"Content-Type\": 'image/' + extension\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Converts temporary avatar into a real avatar\r\n   *\r\n   * @method convertTemporaryAvatar\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param {Object} opts.avatarId The id of the temporary avatar to convert.\r\n   * @param [callback] Called when the avatar has been converted\r\n   * @return {Promise} Resolved when the avatar has been converted\r\n   */\n\n\n  this.convertTemporaryAvatar = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/avatar/'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      },\n      body: {\n        id: opts.avatarId\n      },\n      headers: {\n        \"X-Atlassian-Token\": 'no-check'\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Avatar Converted');\n  };\n  /**\r\n   * Deletes avatar\r\n   *\r\n   * @method deleteAvatar\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param {Object} opts.avatarId The id of the temporary avatar to delete.\r\n   * @param [callback] Called when the avatar has been deleted.\r\n   * @return {Promise} Resolved when the avatar has been deleted.\r\n   */\n\n\n  this.deleteAvatar = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/avatar/' + opts.avatarId),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Avatar Deleted');\n  };\n  /**\r\n   * Returns all avatars which are visible for the currently logged in user.\r\n   *\r\n   * @method getAvatars\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param [callback] Called when the avatars have been retrieved.\r\n   * @return {Promise} Resolved when the avatars have been retrieved.\r\n   */\n\n\n  this.getAvatars = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/avatars'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the default columns for the given user. Admin permission will be required to get columns for a user\r\n   * other than the currently logged in user.\r\n   *\r\n   * @method getDefaultColumns\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param [callback] Called when the columns have been retrieved.\r\n   * @return {Promise} Resolved when the columns have been retrieved.\r\n   */\n\n\n  this.getDefaultColumns = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/columns'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets the default columns for the given user. Admin permission will be required to get columns for a user other\r\n   * than the currently logged in user.\r\n   *\r\n   * @method setDefaultColumns\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param {Array} opts.columns The names of the new columns.  See {@link\r\n      *     https://docs.atlassian.com/jira/REST/latest/#d2e4566}\r\n   * @param [callback] Called when the columns have been set.\r\n   * @return {Promise} Resolved when the columns have been set.\r\n   */\n\n\n  this.setDefaultColumns = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/columns'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      },\n      body: {\n        columns: opts.columns\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Default Columns Set');\n  };\n  /**\r\n   * Reset the default columns for the given user to the system default. Admin permission will be required to get\r\n   * columns for a user other than the currently logged in user.\r\n   *\r\n   * @method resetDefaultColumns\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {string} opts.username The username\r\n   * @param [callback] Called when the columns have been reset.\r\n   * @return {Promise} Resolved when the columns have been reset.\r\n   */\n\n\n  this.resetDefaultColumns = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/columns'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Default Columns Reset');\n  };\n  /**\r\n   * Modify user password.\r\n   *\r\n   * @method changePassword\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.username The name of the user for which to change the password.\r\n   * @param opts.userKey The key of the user for which to change the password.\r\n   * @param opts.password The new password.\r\n   * @param [callback] Called when the password has been set.\r\n   * @return {Promise} Resolved when the password has been set.\r\n   */\n\n\n  this.changePassword = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/password'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        key: opts.userKey\n      },\n      body: {\n        password: opts.password\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback, 'Password Changed');\n  };\n  /**\r\n   * Returns a list of active users that match the search string and have all specified permissions for the project\r\n   * or issue.\r\n   *\r\n   * This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global\r\n   * ADMIN or SYSADMIN rights.\r\n   *\r\n   * @method searchPermissions\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the jira API\r\n   * @param {string} opts.username The username filter, list includes all users if unspecified\r\n   * @param {Array} opts.permissions Array of permissions for project or issue returned users must have, see\r\n   *     [Permissions]{@link\r\n      *     https://developer.atlassian.com/static/javadoc/jira/6.0/reference/com/atlassian/jira/security/Permissions.Permission.html}\r\n      *     JavaDoc for the list of all possible permissions.\r\n   * @param {string} [opts.issueKey] the issue key for the issue for which returned users have specified permissions.\r\n   * @param {string} [opts.projectKey] the optional project key to search for users with if no issueKey is supplied.\r\n   * @param {number} [opts.startAt] the index of the first user to return (0-based)\r\n   * @param {number} [opts.maxResults] the maximum number of users to return (defaults to 50). The maximum allowed\r\n   *     value is 1000. If you specify a value that is higher than this number, your search results will be\r\n   *     truncated.\r\n   * @param [callback] Called when the search results are retrieved.\r\n   * @return {Promise} Resolved when the search results are retrieved.\r\n   */\n\n\n  this.searchPermissions = function (opts, callback) {\n    var permissions = '';\n\n    if (opts.permissions) {\n      opts.permissions.forEach(function (s) {\n        permissions += s + ',';\n      });\n      permissions = permissions.slice(0, -1);\n    }\n\n    var options = {\n      uri: this.jiraClient.buildURL('/user/permission/search'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        permissions: permissions,\n        issueKey: opts.issueKey,\n        projectKey: opts.projectKey,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of users matching query with highlighting. This resource cannot be accessed anonymously.\r\n   *\r\n   * @method searchPicker\r\n   * @memberOf UserClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param {string} opts.query\r\n   * @param {number} [opts.maxResults=50]\r\n   * @param {boolean} [opts.showAvatar=false]\r\n   * @param {string} [opts.exclude]\r\n   * @param [callback] Called when the search results are retrieved.\r\n   * @return {Promise} Resolved when the search results are retrieved.\r\n   */\n\n\n  this.searchPicker = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/picker'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        query: opts.query,\n        maxResults: opts.maxResults,\n        showAvatar: opts.showAvatar,\n        exclude: opts.exclude\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of users that match the search string. This resource cannot be accessed anonymously.\r\n   *\r\n   * @method search\r\n   * @memberOf UserClient#\r\n   * @param {Object} [opts] The request options sent to the Jira API.\r\n   * @param {string} [opts.query]\r\n   * @param {string} [opts.username] A query string used to search username, name or e-mail address\r\n   * @param {string} [opts.accountId]\r\n   * @param {number} [opts.startAt=0] the index of the first user to return (0-based)\r\n   * @param {number} [opts.maxResults=50] the maximum number of users to return (defaults to 50). The maximum allowed\r\n   *     value is 1000. If you specify a value that is higher than this number, your search results will be\r\n   *     truncated.\r\n   * @param {boolean} [opts.includeActive=true] If true, then active users are included in the results (default true)\r\n   * @param {boolean} [opts.includeInactive=false] If true, then inactive users are included in the results (default\r\n   *     false)\r\n   * @param {string} [opts.property]\r\n   * @param {callback} [callback] Called when the search results are retrieved.\r\n   * @return {Promise} Resolved when the search results are retrieved.\r\n   */\n\n\n  this.search = function (opts, callback) {\n    opts = opts || {};\n    var options = {\n      uri: this.jiraClient.buildURL('/user/search'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        query: opts.query,\n        username: opts.username,\n        accountId: opts.accountId,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults,\n        includeActive: opts.includeActive,\n        includeInactive: opts.includeInactive,\n        property: opts.property\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n  * Returns a list of users that match the search string. This resource cannot be accessed anonymously.\r\n  *\r\n  * @method all\r\n  * @memberOf UserClient#\r\n  * @param {Object} opts The request options sent to the Jira API.\r\n  * @param {number} [opts.startAt=0] the index of the first user to return (0-based)\r\n  * @param {number} [opts.maxResults=50] the maximum number of users to return (defaults to 50).\r\n  * @param {callback} [callback] Called when the search results are retrieved.\r\n  * @return {Promise} Resolved when the search results are retrieved.\r\n  */\n\n\n  this.all = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/users/search'),\n      method: 'GET',\n      followAllRedirects: true,\n      json: true,\n      qs: {\n        maxResults: opts.maxResults,\n        startAt: opts.startAt\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns a list of active users that match the search string. This resource cannot be accessed anonymously. Given\r\n   * an issue key this resource will provide a list of users that match the search string and have the browse issue\r\n   * permission for the issue provided.\r\n   *\r\n   * @method viewIssueSearch\r\n   * @memberOf UserClient#\r\n   * @param {Object} opts The request options sent to the Jira API.\r\n   * @param {string} opts.username A query string used to search username, name or e-mail address\r\n   * @param {string} [opts.issueKey] the issue key for the issue being edited we need to find viewable users for.\r\n   * @param {string} [opts.projectKey] the optional project key to search for users with if no issueKey is supplied.\r\n   * @param {number} [opts.startAt=0] the index of the first user to return (0-based)\r\n   * @param {number} [opts.maxResults=50] the maximum number of users to return (defaults to 50). The maximum allowed\r\n   * @param [callback] Called when data has been retrieved\r\n   * @return {Promise} Resolved when data has been retrieved\r\n   */\n\n\n  this.viewIssueSearch = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/user/viewissue/search'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        username: opts.username,\n        issueKey: opts.issueKey,\n        projectKey: opts.projectKey,\n        startAt: opts.startAt,\n        maxResults: opts.maxResults\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}