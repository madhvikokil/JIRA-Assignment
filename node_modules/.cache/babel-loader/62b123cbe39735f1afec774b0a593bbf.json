{"ast":null,"code":"\"use strict\";\n\nmodule.exports = WorkflowSchemeClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/workflowscheme'\r\n * @param {JiraClient} jiraClient\r\n * @constructor WorkflowSchemeClient\r\n */\n\nfunction WorkflowSchemeClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Create a new workflow scheme. The body contains a representation of the new scheme. Values not passed are\r\n   * assumed to be set to their defaults.\r\n   *\r\n   * @method createWorkflowScheme\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowScheme See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2196}\r\n   * @param [callback] Called when the workflow scheme has been created.\r\n   * @return {Promise} Resolved when the workflow scheme has been created.\r\n   */\n\n  this.createWorkflowScheme = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/workflowscheme'),\n      method: 'POST',\n      json: true,\n      followAllRedirects: true,\n      body: opts.workflowScheme\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Update the passed workflow scheme. The body of the request is a representation of the workflow scheme. Values\r\n   * not passed are assumed to indicate no change for that field. The passed representation can have its\r\n   * updateDraftIfNeeded flag set to true to indicate that the draft should be created and/or updated when the actual\r\n   * scheme cannot be edited (e.g. when the scheme is being used by a project). Values not appearing the body will\r\n   * not be touched.\r\n   *\r\n   * @method editWorkflowScheme\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.workflowScheme See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2305}\r\n   * @param [callback] Called when the workflow scheme has been edited.\r\n   * @return {Promise} Resolved when the workflow scheme has been edited.\r\n   */\n\n\n  this.editWorkflowScheme = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'PUT', opts.workflowScheme);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the requested workflow scheme\r\n   *\r\n   * @method getWorkflowScheme\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [opts.returnDraftIfExists=false] when true indicates that a scheme's draft, if it exists, should be\r\n   *     queried instead of the scheme itself.\r\n   * @param [callback] Called when the workflow scheme has been retrieved.\r\n   * @return {Promise} Resolved when the workflow scheme has been retrieved.\r\n   */\n\n\n  this.getWorkflowScheme = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'GET', null, {\n      returnDraftIfExists: opts.returnDraftIfExists\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete the passed workflow scheme.\r\n   *\r\n   * @method deleteWorkflowScheme\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the workflow scheme has been deleted.\r\n   * @return {Promise} Resolved when the workflow scheme has been deleted.\r\n   */\n\n\n  this.deleteWorkflowScheme = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback, 'Workflow Scheme Deleted');\n  };\n  /**\r\n   * Create a draft for the passed scheme. The draft will be a copy of the state of the parent.\r\n   *\r\n   * @method createDraft\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the draft has been created.\r\n   * @return {Promise} Resolved when the draft has been created.\r\n   */\n\n\n  this.createDraft = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/createdraft', 'POST');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the default workflow from the passed workflow scheme.\r\n   *\r\n   * @method getDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.returnDraftIfExists when true indicates that a scheme's draft, if it exists, should be queried\r\n   *     instead of the scheme itself.\r\n   * @param [callback] Called when the default workflow is returned.\r\n   * @return {Promise} Resolved when the default workflow is returned.\r\n   */\n\n\n  this.getDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/default', 'GET', null, {\n      returnDraftIfExists: opts.returnDraftIfExists\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the default workflow from the passed workflow scheme.\r\n   *\r\n   * @method removeDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be\r\n   *     edited (e.g. when it is being used by a project).\r\n   * @param [callback] Called when the defaul workflow has been removed.\r\n   * @return {Promise} Resolved when the defaul workflow has been removed.\r\n   */\n\n\n  this.removeDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/default', 'DELETE', null, {\n      updateDraftIfNeeded: opts.updateDraftIfNeeded\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the default workflow from the passed workflow scheme.\r\n   *\r\n   * @method setDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.workflowName The name of the new deafault workflow\r\n   * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be\r\n   *     edited (e.g. when it is being used by a project).\r\n   * @param [callback] Called when the default workflow has been updated.\r\n   * @return {Promise} Resolved when the default workflow has been updated.\r\n   */\n\n\n  this.setDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/default', 'PUT', {\n      workflow: opts.workflowName,\n      updateDraftIfNeeded: opts.updateDraftIfNeeded\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the requested draft workflow scheme\r\n   *\r\n   * @method getDraft\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the draft has been retrieved.\r\n   * @return {Promise} Resolved when the draft has been retrieved.\r\n   */\n\n\n  this.getDraft = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Update a draft workflow scheme. The draft will created if necessary. The body is a representation of the\r\n   * workflow scheme. Values not passed are assumed to indicate no change for that field.\r\n   *\r\n   * @method editDraft\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.draft See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2575}\r\n   * @param [callback] Called when the draft has been edited.\r\n   * @return {Promise} Resolved when the draft has been edited.\r\n   */\n\n\n  this.editDraft = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft', 'PUT', opts.draft);\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete the passed draft workflow scheme.\r\n   *\r\n   * @method deleteDraft\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the draft has been deleted.\r\n   * @return {Promise} Resolved when the draft has been deleted.\r\n   */\n\n\n  this.deleteDraft = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Get the default workflow from the passed draft workflow scheme\r\n   *\r\n   * @method getDraftDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the default workflow is returned.\r\n   * @return {Promise} Resolved when the default workflow is returned.\r\n   */\n\n\n  this.getDraftDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/default', 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the default workflow from the passed workflow scheme.\r\n   *\r\n   * @method setDraftDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.workflowName The name of the new default workflow\r\n   * @param [callback] Called when the default workflow has been updated.\r\n   * @return {Promise} Resolved when the default workflow has been updated.\r\n   */\n\n\n  this.setDraftDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/default', 'PUT', {\n      workflow: opts.workflowName,\n      updateDraftIfNeeded: opts.updateDraftIfNeeded\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the default workflow from the passed draft workflow scheme.\r\n   *\r\n   * @method removeDraftDefaultWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param [callback] Called when the defaul workflow has been removed.\r\n   * @return {Promise} Resolved when the defaul workflow has been removed.\r\n   */\n\n\n  this.removeDraftDefaultWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/default', 'DELETE');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the issue type mapping for the passed workflow scheme.\r\n   *\r\n   * @method getIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param opts.returnDraftIfExists when true indicates that a scheme's draft, if it exists, should be queried\r\n   *     instead of the scheme itself.\r\n   * @param [callback] Called when the issue type has been retrieved.\r\n   * @return {Promise} Resolved when the issue type has been retrieved.\r\n   */\n\n\n  this.getIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'GET', null, {\n      returnDraftIfExists: opts.returnDraftIfExists\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Set the issue type mapping for the passed scheme. The passed representation can have its updateDraftIfNeeded\r\n   * flag set to true to indicate that the draft should be created/updated when the actual scheme cannot be edited.\r\n   *\r\n   * @method editIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param opts.workflow The new workflow\r\n   * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be\r\n   *     edited (e.g. when it is being used by a project).\r\n   * @param [callback] Called when the issue type has been edited\r\n   * @return {Promise} Resolved when the issue type has been edited\r\n   */\n\n\n  this.editIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'PUT', {\n      workflow: opts.workflow,\n      updateDraftIfNeeded: opts.updateDraftIfNeeded\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the specified issue type mapping from the scheme.\r\n   *\r\n   * @method removeIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param [callback] Called when the issue type mapping has been removed.\r\n   * @return {Promise} Resolved when the issue type mapping has been removed.\r\n   */\n\n\n  this.removeIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'DELETE', null, {\n      updateDraftIfNeeded: opts.updateDraftIfNeeded\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the issue type mapping for the passed draft workflow scheme.\r\n   *\r\n   * @method getDraftIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API.\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param [callback] Called when the issue type has been retrieved.\r\n   * @return {Promise} Resolved when the issue type has been retrieved.\r\n   */\n\n\n  this.getDraftIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'GET');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Set the issue type mapping for the passed draft scheme.\r\n   *\r\n   * @method editDraftIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param opts.workflow The new workflow\r\n   * @param [callback] Called when the issue type has been edited\r\n   * @return {Promise} Resolved when the issue type has been edited\r\n   */\n\n\n  this.editDraftIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'PUT', {\n      workflow: opts.workflow\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Remove the specified issue type mapping from the scheme.\r\n   *\r\n   * @method removeDraftIssueType\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.issueType The issue type\r\n   * @param [callback] Called when the issue type mapping has been removed.\r\n   * @return {Promise} Resolved when the issue type mapping has been removed.\r\n   */\n\n\n  this.removeDraftIssueType = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'DELETE');\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the workflow mappings or requested mapping to the caller for the passed scheme.\r\n   *\r\n   * @method getWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.workflowName The name of the workflow.\r\n   * @param [callback] Called when the workflow has been retrieved.\r\n   * @return {Promise} Resolved when the workflow has been retrieved.\r\n   */\n\n\n  this.getWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/workflow', 'GET', null, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Returns the workflow mappings or requested mapping to the caller for the passed draft scheme.\r\n   *\r\n   * @method getDraftWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param opts The request options sent to the Jira API\r\n   * @param opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param opts.workflowName The name of the workflow.\r\n   * @param [callback] Called when the workflow has been retrieved.\r\n   * @return {Promise} Resolved when the workflow has been retrieved.\r\n   */\n\n\n  this.getDraftWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/workflow', 'GET', null, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Update the scheme to include the passed mapping. The body is a representation of the workflow mapping. Values\r\n   * not passed are assumed to indicate no change for that field.\r\n   *\r\n   * @method editWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param {string} opts.workflowName The name of the workflow.\r\n   * @param {Array} opts.issueTypes The new issue types to inclue in the workflow.\r\n   *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2509}\r\n   * @param [callback] Called when the workflow has been edited.\r\n   * @return {Promise} Resolved when the workflow has been edited.\r\n   */\n\n\n  this.editWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/workflow', 'PUT', {\n      workflow: opts.workflowName,\n      issueTypes: opts.issueTypes\n    }, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Update the draft scheme to include the passed mapping. The body is a representation of the workflow mapping.\r\n   * Values not passed are assumed to indicate no change for that field.\r\n   *\r\n   * @method editDraftWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param {string} opts.workflowName The name of the workflow.\r\n   * @param {Array} opts.issueTypes The new issue types to inclue in the workflow.\r\n   *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2670 }\r\n   * @param [callback] Called when the workflow has been edited.\r\n   * @return {Promise} Resolved when the workflow has been edited.\r\n   */\n\n\n  this.editDraftWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/workflow', 'PUT', {\n      workflow: opts.workflowName,\n      issueTypes: opts.issueTypes\n    }, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete the passed workflow from the workflow scheme.\r\n   *\r\n   * @method deleteWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param {string} opts.workflowName The name of the workflow.\r\n   * @param [callback] Called when the workflow has been edited.\r\n   * @return {Promise} Resolved when the workflow has been edited.\r\n   */\n\n\n  this.deleteWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/workflow', 'DELETE', null, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Delete the passed workflow from the workflow draft scheme.\r\n   *\r\n   * @method deleteDraftWorkflow\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param {Object} opts The request options sent to the Jira API\r\n   * @param {number} opts.workflowSchemeId The id of the workflow scheme.\r\n   * @param {string} opts.workflowName The name of the workflow.\r\n   * @param [callback] Called when the workflow has been edited.\r\n   * @return {Promise} Resolved when the workflow has been edited.\r\n   */\n\n\n  this.deleteDraftWorkflow = function (opts, callback) {\n    var options = this.buildRequestOptions(opts, '/draft/workflow', 'DELETE', null, {\n      workflowName: opts.workflowName\n    });\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Build out the request options necessary to make a particular API call.\r\n   *\r\n   * @private\r\n   * @method buildRequestOptions\r\n   * @memberOf WorkflowSchemeClient#\r\n   * @param {Object} opts The arguments passed to the method.\r\n   * @param {number} opts.workflowSchemeId The id of the workflowScheme to use in the path.\r\n   * @param {Array} [opts.fields] The fields to include\r\n   * @param {Array} [opts.expand] The fields to expand\r\n   * @param {string} path The path of the endpoint following /workflowScheme/{id}\r\n   * @param {string} method The request method.\r\n   * @param {Object} [body] The request body, if any.\r\n   * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.\r\n   * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}\r\n   */\n\n\n  this.buildRequestOptions = function (opts, path, method, body, qs) {\n    var basePath = '/workflowscheme/' + opts.workflowSchemeId;\n    if (!qs) qs = {};\n    if (!body) body = {};\n\n    if (opts.fields) {\n      qs.fields = '';\n      opts.fields.forEach(function (field) {\n        qs.fields += field + ',';\n      });\n      qs.fields = qs.fields.slice(0, -1);\n    }\n\n    if (opts.expand) {\n      qs.expand = '';\n      opts.expand.forEach(function (ex) {\n        qs.expand += ex + ',';\n      });\n      qs.expand = qs.expand.slice(0, -1);\n    }\n\n    return {\n      uri: this.jiraClient.buildURL(basePath + path),\n      method: method,\n      body: body,\n      qs: qs,\n      followAllRedirects: true,\n      json: true\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}