{"ast":null,"code":"\"use strict\"; // npm packages\n\nvar Oauth = require('oauth'); // Core packages\n\n\nvar url = require('url'); // Custom Packages\n\n\nvar errorStrings = require('./error');\n/**\r\n * @namespace OauthUtil\r\n */\n\n/**\r\n * Attempts to get an OAuth verification URL using the given API configuration.\r\n *\r\n * @memberOf OauthUtil\r\n * @param {Object} config The information needed to access the Jira API\r\n * @param {string} config.host The hostname of the Jira API.\r\n * @param {string} [config.protocol=https] - The protocol used to accses the Jira API.\r\n * @param {number} [config.port=443] - The port number used to connect to Jira.\r\n * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\"\r\n * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only\r\n *     version 2 is supported.\r\n * @param {Object} config.oauth The oauth information\r\n * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira.\r\n * @param {string} config.oauth.private_key The private key of the application accessing Jira.\r\n * @param {string} [config.oauth.callback_url] The callback URL to be called after the token is generated.  If this is\r\n *     not included, the user will be given a verification code after authorizing the token, instead of Jira making a\r\n *     callback to the application.\r\n * @param {OauthUtil~getOauthUrlCallback} callback The function called when the URL has been retrieved.\r\n */\n\n\nexports.getAuthorizeURL = function (config, callback) {\n  var prefix = config.path_prefix ? config.path_prefix : '';\n  var AUTH_TOKEN_APPEND = '/oauth/authorize';\n  var SERVLET_BASE_URL = prefix + '/plugins/servlet';\n  var authURL = url.format({\n    protocol: config.protocol ? config.protocol : 'https',\n    hostname: config.host,\n    port: config.port ? config.port : null,\n    pathname: SERVLET_BASE_URL + AUTH_TOKEN_APPEND\n  });\n  var oauth = generateOAuthObject(config);\n  oauth.getOAuthRequestToken(function (err, token, token_secret) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, {\n      url: authURL + \"?oauth_token=\" + token,\n      token: token,\n      token_secret: token_secret\n    });\n  });\n};\n/**\r\n * Given an OAuth token, the token secret, and an access verification code (provided by Jira), swap an OAuth request\r\n * token with an OAuth access token.\r\n *\r\n * @memberOf OauthUtil\r\n * @param {Object} config The information needed to access the Jira API\r\n * @param {string} config.host The hostname of the Jira API.\r\n * @param {string} [config.protocol=https] - The protocol used to accses the Jira API.\r\n * @param {number} [config.port=443] - The port number used to connect to Jira.\r\n * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only\r\n *     version 2 is supported.\r\n * @param {Object} config.oauth The oauth information\r\n * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira.\r\n * @param {string} config.oauth.private_key The private key of the application accessing Jira.\r\n * @param {string} config.oauth.token The OAuth Token supplied by Jira.\r\n * @param {string} config.oauth.token_secret The OAuth Token secret supplied by Jira.\r\n * @param {string} config.oauth.oauth_verifier The verified code given to the user after authorizing the OAuth token.\r\n * @param {OauthUtil~swapRequestTokenCallback} callback The function called when the token has been swapped.\r\n */\n\n\nexports.swapRequestTokenWithAccessToken = function (config, callback) {\n  if (!config.oauth.oauth_verifier) {\n    throw new Error(errorStrings.NO_VERIFIER_ERROR);\n  }\n\n  var oauth = generateOAuthObject(config);\n  var token = config.oauth.token;\n  var secret = config.oauth.token_secret;\n  var verifier = config.oauth.oauth_verifier;\n  oauth.getOAuthAccessToken(token, secret, verifier, callback);\n};\n/**\r\n * Utility function to generate an OAuth object.\r\n *\r\n * @memberOf OauthUtil\r\n * @param {Object} config The information needed to access the Jira API\r\n * @param {string} config.host The hostname of the Jira API.\r\n * @param {string} [config.protocol=https] - The protocol used to accses the Jira API.\r\n * @param {number} [config.port=443] - The port number used to connect to Jira.\r\n * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\"\r\n * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only\r\n *     version 2 is supported.\r\n * @param {Object} config.oauth The oauth information\r\n * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira.\r\n * @param {string} config.oauth.private_key The private key of the application accessing Jira.\r\n * @param {string} [config.oauth.callback_url] The callback URL to be called after the token is generated.  If this is\r\n *     not included, the user will be given a verification code after authorizing the token, instead of Jira making a\r\n *     callback to the application.\r\n *\r\n * @returns {exports.OAuth} The generated object.\r\n */\n\n\nfunction generateOAuthObject(config) {\n  var prefix = config.path_prefix ? config.path_prefix : '';\n  var SERVLET_BASE_URL = prefix + '/plugins/servlet';\n  var REQ_TOKEN_APPEND = '/oauth/request-token';\n  var ACCESS_TOKEN_APPEND = '/oauth/access-token';\n  var sig = 'RSA-SHA1';\n\n  if (!config.host) {\n    throw new Error(errorStrings.NO_HOST_ERROR);\n  } else if (!config.oauth.consumer_key) {\n    throw new Error(errorStrings.NO_CONSUMER_KEY_ERROR);\n  } else if (!config.oauth.private_key) {\n    throw new Error(errorStrings.NO_PRIVATE_KEY_ERROR);\n  }\n\n  var consumer_key = config.oauth.consumer_key;\n  var private_key = config.oauth.private_key;\n  var reqURL = url.format({\n    protocol: config.protocol ? config.protocol : 'https',\n    hostname: config.host,\n    port: config.port ? config.port : null,\n    pathname: SERVLET_BASE_URL + REQ_TOKEN_APPEND\n  });\n  var accessURL = url.format({\n    protocol: config.protocol ? config.protocol : 'https',\n    hostname: config.host,\n    port: config.port ? config.port : null,\n    pathname: SERVLET_BASE_URL + ACCESS_TOKEN_APPEND\n  });\n  var cb = config.oauth.callback_url ? config.oauth.callback_url : 'oob';\n  return new Oauth.OAuth(reqURL, accessURL, consumer_key, private_key, '1.0', cb, sig);\n}\n/**\r\n * Callback used by getOauthUrl.\r\n * @callback OauthUtil~getOauthUrlCallback\r\n * @param {*} error The error which occurred, if any.\r\n * @param {Object} oauth The OAuth information retrieved from the Jira API.\r\n * @param {String} oauth.url The URL that should be visited by the user to verify the OAuth access.\r\n * @param {String} oauth.token The OAuth Token retrieved from the Jira API.\r\n * @param {String} oauth.token_secret The OAuth Token Secret retrieved from the Jira API.\r\n */\n\n/**\r\n * Callback used by swapRequestTokenWithAccessToken\r\n * @callback OauthUtil~swapRequestTokenCallback\r\n * @param {*} error The error which occurred, if any.\r\n * @param {string} access_token The access token retrieved from Jira.\r\n */","map":null,"metadata":{},"sourceType":"script"}