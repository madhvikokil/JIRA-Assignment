{"ast":null,"code":"\"use strict\";\n\nmodule.exports = MyPreferencesClient;\n/**\r\n * Used to access Jira REST endpoints in '/rest/api/2/mypreferences'\r\n *\r\n * @param {JiraClient} jiraClient\r\n * @constructor MyPreferencesClient\r\n */\n\nfunction MyPreferencesClient(jiraClient) {\n  this.jiraClient = jiraClient;\n  /**\r\n   * Gets preference of the currently logged in user. Preference key must be provided as input parameter (key).\r\n   * The value is returned exactly as it is.\r\n   *\r\n   * @method getPreference\r\n   * @memberOf MyPreferencesClient#\r\n   * @param opts The request options send to the Jira API.\r\n   * @param opts.key Key of the preference to be returned.\r\n   * @param [callback] Called when the preference has been retrieved.\r\n   * @return {Promise} Resolved when the preference has been retrieved.\r\n   */\n\n  this.getPreference = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/mypreferences'),\n      method: 'GET',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        key: opts.key\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Sets preference of the currently logged in user. Preference key must be provided as input parameters (key).\r\n   *\r\n   * @method editPreference\r\n   * @memberOf MyPreferencesClient#\r\n   * @param opts The request options send to the Jira API.\r\n   * @param opts.key Key of the preference to be edited.\r\n   * @param opts.value The new value to set for the preference.\r\n   * @param [callback] Called when the preference has been edited.\r\n   * @return {Promise} Resolved when the preference has been edited.\r\n   */\n\n\n  this.editPreference = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/mypreferences'),\n      method: 'PUT',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        key: opts.key\n      },\n      body: opts.value\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n  /**\r\n   * Removes preference of the currently logged in user. Preference key must be provided as input parameters (key).\r\n   *\r\n   * @method deletePreference\r\n   * @memberOf MyPreferencesClient#\r\n   * @param opts The request options send to the Jira API.\r\n   * @param opts.key Key of the preference to be deleted.\r\n   * @param [callback] Called when the preference has been deleted.\r\n   * @return {Promise} Resolved when the preference has been deleted.\r\n   */\n\n\n  this.deletePreference = function (opts, callback) {\n    var options = {\n      uri: this.jiraClient.buildURL('/mypreferences'),\n      method: 'DELETE',\n      json: true,\n      followAllRedirects: true,\n      qs: {\n        key: opts.key\n      }\n    };\n    return this.jiraClient.makeRequest(options, callback);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}